unit utPracticeLedger;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

{$TYPEINFO ON} //Needed for classes with published methods

interface

uses
  TestFramework, bkchio, PracticeLedgerObj, bkutil32, TransactionUtils, baObj32, Classes,
  bkdefs, sysUtils, CashbookMigrationRestData, bkConst, CashbookMigration, chList32,
  uLkJSON, MoneyDef, globals, sysobj32, AppUserObj, clObj32, BKdsIO, trxList32;

type
  // Test methods for class TPracticeLedger
  
  TestTPracticeLedger = class(TTestCase)
  strict private
    FPracticeLedger: TPracticeLedger;
    BK5TestClient : TClientObj;
    Chart230,
    Chart400 : pAccount_Rec;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure CreateBK5TestClient;
  published
    procedure TestFirmData;
    procedure TestBusinessData;
    procedure TestImportCOA;
    procedure TestExtractData;
  end;

const
  Apr01_2004 = 147649;
  Apr02_2004 = Apr01_2004 + 1;
  Apr03_2004 = Apr01_2004 + 2;
  Apr04_2004 = Apr01_2004 + 3;
  Apr05_2004 = Apr01_2004 + 4;

implementation

uses INISettings, Dialogs;

procedure TestTPracticeLedger.CreateBK5TestClient;
var
  ba : TBank_Account;
  pt : pTransaction_Rec;
  pD : pDissection_Rec;

begin
  //create a test client
  BK5TestClient := TClientObj.Create;
  //basic client details
  BK5TestClient.clFields.clCode := 'UNITTEST';
  BK5TestClient.clFields.clName := 'DUnit Test Client';
  BK5TestClient.clFields.clCountry := 0;    //New Zealand
  BK5TestClient.clFields.clFile_Type := 0;  //banklink file
  BK5TestClient.clFields.clAccounting_System_Used := 0;
  BK5TestClient.clFields.clFinancial_Year_Starts := 147649; //01 April 2004
  BK5TestClient.clFields.clMagic_Number  := 123456;

  //gst rates (NZ)
  BK5TestClient.clFields.clGST_Applies_From[1] := 138883; // 01 Jan 1980

  {Income}
  BK5TestClient.clFields.clGST_Class_Codes[1]  := 'I';
  BK5TestClient.clFields.clGST_Class_Names[1]  := 'GST on Sales';
  BK5TestClient.clFields.clGST_Class_Types[1]  := gtOutputTax;
  BK5TestClient.clFields.clGST_Rates[1,1]      := 125000;
  {Expenditure}
  BK5TestClient.clFields.clGST_Class_Codes[2]  := 'E';
  BK5TestClient.clFields.clGST_Class_Names[2]  := 'GST on Purchases';
  BK5TestClient.clFields.clGST_Class_Types[2]  := gtInputTax;
  BK5TestClient.clFields.clGST_Rates[2,1]      := 125000;
  {Exempt}
  BK5TestClient.clFields.clGST_Class_Codes[3]  := 'X';
  BK5TestClient.clFields.clGST_Class_Names[3]  := 'Exempt';
  BK5TestClient.clFields.clGST_Class_Types[3]  := gtExempt;
  BK5TestClient.clFields.clGST_Rates[3,1]      := 0;
  BK5TestClient.ClExtra.ceLocal_Currency_Code  := 'NZD';
  MyClient := BK5TestClient;
  //chart
  Chart230 := bkChio.New_Account_Rec;
  Chart230^.chAccount_Code := '230';
  Chart230^.chAccount_Description := 'Sales';
  Chart230^.chGST_Class := 1;
  Chart230^.chPosting_Allowed := true;
  BK5TestClient.clChart.Insert( Chart230);

  Chart400 := bkChio.New_Account_Rec;
  Chart400^.chAccount_Code := '400';
  Chart400^.chAccount_Description := 'Expenses 400';
  Chart400^.chGST_Class := 2;
  Chart400^.chPosting_Allowed := true;
  BK5TestClient.clChart.Insert( Chart400);

  //create two bank accounts
  ba := TBank_Account.Create(nil);
//  ba.baClient := bk5testClient;
  ba.baFields.baBank_Account_Number := '12345';
  ba.baFields.baBank_Account_Name   := 'Account 1';
  ba.baFields.baCurrent_Balance := 100;
  ba.baFields.baContra_Account_Code := '680';
  ba.baFields.baCurrency_Code := 'NZD';

  bk5testClient.clBank_Account_List.Insert( ba);

  //create transactions
  pT := ba.baTransaction_List.Setup_New_Transaction;

  pT^.txDate_Presented  := Apr01_2004;
  pT.txDate_Effective   := Apr01_2004;
  pT.txAmount           := 12000;
  pT.txAccount          := '230';
  pT.txNotes            := 'NOTE';
  pT.txGL_Narration     := 'Account 1 Tran1';
  pT.txTax_Invoice_Available   := false;
  pT.txPayee_Number     := 0;
  pT.txGST_Class := 1;
  pt.txGST_Amount := Round(12000 / 9);
  pT.txExternal_GUID := '11';


  ba.baTransaction_List.Insert_Transaction_Rec( pT);

  //create dissected
  pT := ba.baTransaction_List.Setup_New_Transaction;

  pT^.txDate_Presented  := Apr02_2004;
  pT.txDate_Effective   := Apr02_2004;
  pT.txAmount           := 15000;
  pT.txAccount          := 'DISSECTED';
  pT.txNotes            := 'NOTE';
  pT.txGL_Narration     := 'Account 1 Tran2';
  pT.txTax_Invoice_Available   := false;
  pT.txPayee_Number     := 0;
  pT.txExternal_GUID := '12';

    pD := bkdsio.New_Dissection_Rec;
    pD^.dsAccount         := '400';
    pD.dsAmount           := 6000;
    pD.dsGST_Class        := 2;
    pD.dsGST_Amount       := Round(6000/9);
    pD.dsNotes            := 'L1 NOTE';
    pD.dsGL_Narration     := 'Line 1';
    AppendDissection( pT, pD);

    pD := bkdsio.New_Dissection_Rec;
    pD^.dsAccount         := '402';
    pD.dsAmount           := 9000;
    pD.dsGST_Class        := 3;
    pD.dsGST_Amount       := 0;
    pD.dsGST_Has_Been_Edited := True;
    pD.dsNotes            := 'L2 NOTE';
    pD.dsGL_Narration     := 'Line 2';
    AppendDissection( pT, pD);

  ba.baTransaction_List.Insert_Transaction_Rec( pT);

  //create 2nd bank account
  ba := TBank_Account.Create(nil);
//  ba.baClient := bk5testClient;
  ba.baFields.baBank_Account_Number := '67890';
  ba.baFields.baBank_Account_Name   := 'Account 2';
  ba.baFields.baCurrent_Balance := 100;
  ba.baFields.baContra_Account_Code := '681';
  ba.baFields.baCurrency_Code := 'NZD';
  bk5testClient.clBank_Account_List.Insert( ba);

  pT := ba.baTransaction_List.Setup_New_Transaction;

  pT^.txDate_Presented  := Apr03_2004;
  pT.txDate_Effective   := Apr03_2004;
  pT.txAmount           := -4000;
  pT.txAccount          := '230';
  pT.txNotes            := 'NOTE';
  pT.txGL_Narration     := 'Account 2 Tran1';
  pT.txTax_Invoice_Available   := false;
  pT.txPayee_Number     := 0;
  pT.txGST_Class := 1;
  pt.txGST_Amount := Round(4000 / 9);
  pT.txExternal_GUID := '13';
  pT^.txQuantity := 123456;

  ba.baTransaction_List.Insert_Transaction_Rec( pT);

  //create dissected
  pT := ba.baTransaction_List.Setup_New_Transaction;

  pT^.txDate_Presented  := Apr04_2004;
  pT.txDate_Effective   := Apr04_2004;
  pT.txAmount           := 20000;
  pT.txAccount          := 'DISSECTED';
  pT.txNotes            := 'NOTE';
  pT.txGL_Narration     := '[A]c<c/>"&ount 2 Tran2';
  pT.txTax_Invoice_Available   := false;
  pT.txPayee_Number     := 0;
  pT.txExternal_GUID := '14';
    pD := bkdsio.New_Dissection_Rec;
    pD^.dsAccount         := '400';
    pD.dsAmount           := 6000;
    pD.dsGST_Class        := 2;
    pD.dsGST_Amount       := Round(6000/9);
    pD.dsNotes            := 'L1 NOTE';
    pD.dsGL_Narration     := 'Line 1';
    AppendDissection( pT, pD);

    pD := bkdsio.New_Dissection_Rec;
    pD^.dsAccount         := '402';
    pD.dsAmount           := 14000;
    pD.dsGST_Class        := 3;
    pD.dsGST_Amount       := 0;
    pD.dsGST_Has_Been_Edited := True;
    pD.dsNotes            := 'L2 NOTE';
    pD.dsGL_Narration     := 'Line 2';
    AppendDissection( pT, pD);

  ba.baTransaction_List.Insert_Transaction_Rec( pT);
end;

procedure TestTPracticeLedger.SetUp;
begin
  FPracticeLedger := PracticeLedger; // Assign the globally created object
end;

procedure TestTPracticeLedger.TearDown;
begin
  {FPracticeLedger.Free;
  FPracticeLedger := nil;}
end;

procedure TestTPracticeLedger.TestBusinessData;
var
  jSon: string;
  RequestData: TlkJSONbase;
  Businesses : TBusinesses;
begin
  json := '{"businesses":[{"id":"0672debe-828f-46d0-a0fa-7f1ccbacbb71","firm_id":"1-18PU1ZU","name":"CATE01","client_code":"CATE01",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"7189b969-e639-4662-a5f5-66e0093ac7aa","firm_id":"1-18PU1ZU","name":"JUST","client_code":"JUST",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"197f4504-4819-48f9-9729-4101ff670309","firm_id":"1-18PU1ZU","name":"POCKET","client_code":"POCKET",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"a6b3aaf5-187d-44d2-9b93-e0b13745ede1","firm_id":"1-18PU1ZU","name":"SELECT FILE","client_code":"SELECTFILE",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"71882eab-071a-40c6-a679-b23a1f427a7b","firm_id":"1-18PU1ZU","name":"UNCATMIGR","client_code":"UNCATMIGR",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"4e8dd77b-3de9-45a2-8554-a530dd46323c","firm_id":"1-18PU1ZU","name":"TESTINGGM5","client_code":"TESTINGGM5",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"7ee90786-d9d9-414e-801d-e06f6fcf5a74","firm_id":"1-18PU1ZU","name":"TESTMIG5","client_code":"TESTMIG5",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"d86792b3-f7d7-46af-ac52-37030797ab41","firm_id":"1-18PU1ZU","name":"ABHRA","client_code":"ABHRA",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"c5838030-2e94-409f-a77c-5ecdf7533220","firm_id":"1-18PU1ZU","name":"REALPAGE","client_code":"REALPAGE",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":true,"licence_code":"PL"},'+
  '{"id":"2275138a-2c44-4d38-9d79-481a5520914e","firm_id":"1-18PU1ZU","name":"REAPAGE","client_code":"REALPAGE",'+
  '"abn":"","ird":"","financial_year_start_month":7,"business_type":"Agriculture","visibility":false,"licence_code":"PL"},'+
  '{"id":"3456a343-b091-4532-8e39-3efd68c6019c","firm_id":"1-18PU1ZU","name":"Digi-1 K","client_code":"CLIENTACC1",'+
  '"abn":null,"ird":null,"financial_year_start_month":7,"business_type":"Blank","visibility":true,"licence_code":"PL"},'+
  '{"id":"6779036d-b1ac-4bf6-a528-450bac1f3899","firm_id":"1-18PU1ZU","name":"DivTest01","client_code":"CLIENTACC1",'+
  '"abn":null,"ird":null,"financial_year_start_month":7,"business_type":"Blank","visibility":true,"licence_code":"PL"},'+
  '{"id":"51489860-10e5-4638-a982-69fdbc5bfc9b","firm_id":"1-18PU1ZU","name":"Awesome Biz","client_code":"Awesom",'+
  '"abn":"99000000000","ird":null,"financial_year_start_month":7,"business_type":"Products","visibility":true,"licence_code":"CB"}]}';
  RequestData := TlkJSON.ParseText(jSon);
  Businesses := TBusinesses.Create;
  try
    Businesses.Read('1-18PU1ZU', ltPracticeLedger, RequestData as TlkJSONobject);
    CheckTrue(Businesses.Count = 11);
    CheckTrue(TBusinessData(Businesses.GetItem(0)).Name = 'ABHRA');
    Businesses.Clear;
    Businesses.Read('1-18PU1ZU', ltCashbook, RequestData as TlkJSONobject);
    CheckTrue(Businesses.Count = 1);
  finally
    FreeAndNil(Businesses);
  end;
end;

procedure TestTPracticeLedger.TestExtractData;
var
  Selected : TStringList;
  RequestJson : TlkJSONobject;
  BankAcToExport : TBankAccountData;
begin
  CreateBK5TestClient;
  if Assigned(BK5TestClient) then
  begin
    Selected := TStringList.Create;
    Selected.AddObject(TBank_Account(bk5testClient.clBank_Account_List.Items[0]).baFields.baBank_Account_Number , bk5testClient.clBank_Account_List.Items[0]);
    Selected.AddObject(TBank_Account(bk5testClient.clBank_Account_List.Items[1]).baFields.baBank_Account_Number , bk5testClient.clBank_Account_List.Items[1]);
    FPracticeLedger.PrepareTransAndJournalsToExport(Selected, ttbank, Apr01_2004, Apr05_2004);
    BankAcToExport := FPracticeLedger.GetBankAccount(1);
    RequestJson := TlkJSONobject.Create;
    BankAcToExport.Write(RequestJson, 0, 200);
  end;
  CheckTrue(BankAcToExport.Transactions.Count = 2);
end;

procedure TestTPracticeLedger.TestImportCOA;
var
  Accounts : TChartOfAccountsData;
  NewChart : TChart;
  Accountsjson : TlkJSONobject;
  json : string;
begin
  CreateBK5TestClient;
  if Assigned(BK5TestClient) then
  begin
    json := '{"accounts":[{"id":378305,"name":"Fee income","number":"4-1200","opening_balance":null,"tax_rate":"GST","bank_or_credit_flag":false,"system_account":false,'+
    '"business_id":"6a74c6f6-3ba7-48faba0cd84f6fcb1531","chart_of_accounts_id":2021,"permits_opening_balance":true,"permits_journal_entry":true,'+
    '"has_transactions":true,"account_type_group_id":null,"account_type":"income","system_account_type":""},'+
    '{"id":378306,"name":"Licensing income","number":"4-1600","opening_balance":null,"tax_rate":"GST","bank_or_credit_flag":false,"system_account":false,'+
    '"business_id":"6a74c6f6-3ba7-48fa-ba0c-d84f6fcb1531","chart_of_accounts_id":2021,"permits_opening_balance":true,"permits_journal_entry":true,'+
    '"has_transactions":true,"account_type_group_id":null,"account_type":"income","system_account_type":""},'+
    '{"id":378307,"name":"Sales 1","number":"4-2400","opening_balance":null,"tax_rate":"GST","bank_or_credit_flag":false,"system_account":false,'+
    '"business_id":"6a74c6f6-3ba7-48fa-ba0c-d84f6fcb1531","chart_of_accounts_id":2021,"permits_opening_balance":true,"permits_journal_entry":true,'+
    '"has_transactions":true,"account_type_group_id":null,"account_type":"income","system_account_type":""},'+
    '{"id":378308,"name":"Sales 2","number":"4-2600","opening_balance":null,"tax_rate":"GST","bank_or_credit_flag":false,"system_account":false,'+
    '"business_id":"6a74c6f6-3ba7-48fa-ba0c-d84f6fcb1531","chart_of_accounts_id":2021,"permits_opening_balance":true,"permits_journal_entry":true,'+
    '"has_transactions":false,"account_type_group_id":null,"account_type":"income","system_account_type":""},'+
    '{"id":379232,"name":"Cash Journals","number":"100","opening_balance":null,"tax_rate":"GST","bank_or_credit_flag":null,"system_account":false,'+
    '"business_id":"6a74c6f6-3ba7-48fa-ba0c-d84f6fcb1531","chart_of_accounts_id":2021,"permits_opening_balance":true,"permits_journal_entry":true,'+
    '"has_transactions":false,"account_type_group_id":28608,"account_type":"income","system_account_type":""},'+
    '{"id":383835,"name":"Bank Account Contra","number":"1-1500","opening_balance":null,"tax_rate":"GST","bank_or_credit_flag":true,"system_account":false,'+
    '"business_id":"6a74c6f6-3ba7-48fa-ba0c-d84f6fcb1531","chart_of_accounts_id":2021,"permits_opening_balance":true,"permits_journal_entry":true,'+
    '"has_transactions":false,"account_type_group_id":28503,"account_type":"asset","system_account_type":""}]}';

    Accountsjson := TLkJson.ParseText(json) as TlkJSONobject;
    Accounts := TChartOfAccountsData.Create(TChartOfAccountData);
    Accounts.Read('0672debe-828f-46d0-a0fa-7f1ccbacbb71', Accountsjson);
    NewChart := TChart.Create(MyClient.ClientAuditMgr);

    FPracticeLedger.ProcessChartOfAccounts(NewChart ,Accounts);
  end;
  CheckTrue(NewChart.ItemCount=6);
end;


procedure TestTPracticeLedger.TestFirmData;
var
  json : string;
  Firms : TFirms;
  RequestData : TlkJSONbase;
begin
  json := '[{"id":"1-18PU1ZU","name":"Cashbook Feature Firm AU","client_id":"8298294","region":"AU","eligible_licence_codes":["CB","PL"]},'+
  '{"id":"1-18PWMWG","name":"Cashbook Feature Firm NZ","client_id":"8298301","region":"NZ","eligible_licence_codes":["CB","PL"]},'+
  '{"id":"1-6KXPEP8","name":"Vidya Cb Test","client_id":"84007075","region":"AU","eligible_licence_codes":["CB"]},'+
  '{"id":"1-6LK60H6","name":"Cash Book Test 1","client_id":"8408043","region":"AU","eligible_licence_codes":["CB"]}]';
  RequestData := TlkJSON.ParseText(jSon);
  Firms := TFirms.Create;
  try
    Firms.Read(RequestData as TlkJSONlist);
    CheckTrue(Firms.Count = 4);
    CheckTrue(TFirm(Firms.GetItem(3)).Name = 'Vidya Cb Test');
  finally
    FreeAndNil(Firms);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPracticeLedger.Suite);
end.


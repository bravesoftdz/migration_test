unit utPracticeLedger;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

{$TYPEINFO ON} //Needed for classes with published methods

interface

uses
  TestFramework, bkchio, PracticeLedgerObj, bkutil32, TransactionUtils, baObj32, Classes, 
  bkdefs, sysUtils, CashbookMigrationRestData, bkConst, CashbookMigration, chList32, 
  uLkJSON, MoneyDef, globals, sysobj32;

type
  // Test methods for class TPracticeLedger
  
  TestTPracticeLedger = class(TTestCase)
  strict private
    FPracticeLedger: TPracticeLedger;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestMYOBPLLogin;
    procedure TestLoadFirms;
    procedure TestLoadBusinesses;
    procedure TestExtractData;
    procedure TestImportCOA;
  end;

implementation

uses INISettings, Dialogs, AppUserObj, clObj32;

procedure TestTPracticeLedger.SetUp;
begin
  FPracticeLedger := TPracticeLedger.Create;
end;

procedure TestTPracticeLedger.TearDown;
begin
  FPracticeLedger.Free;
  FPracticeLedger := nil;
end;

procedure TestTPracticeLedger.TestExtractData;
var
  jSon: string;
  aErr, aRespStr : string;
  aInvalidPass : Boolean;
  RequestData: TlkJSONbase;
begin
  jSon := '{"batch_ref":"ANDREW PTY LTD-24112015104746","bank_account_number":"2-1000","bank_transactions":[{"date":"20150112",'+
  '"description":"QLD BUILDING SERVICE WESTEND","amount":283740,"core_transaction_id":"000001721479573",'+
  '"quantity":0,"allocations":[{"account_number":"6-6600","description":"Qld Building Svce -Insce",'+
  '"amount":257945,"tax_rate":"GST","tax_amount":25795,"quantity":0}]},'+
  (*'{"date":"2015-01-12","description":'+
  '"QLEAVE BUILDING & CONS LUTWYCHE","amount":-127400,"core_transaction_id":"000001721479574",'+
  '"quantity":0,"allocations":[{"account_number":"5-2400","description":"QLeave Building &Construction",'+
  '"amount":115818,"tax_rate":"GST","tax_amount":11582,"quantity":0}]},{"date":"2015-01-14",'+
  '"description":"BCC TRANSFER STN FERNY FERNYGROVE","amount":10492,"core_transaction_id":"000001722739934","quantity":0,'+
  '"allocations":[{"account_number":"1-1400","description":"BCC Transfer - Dump Fees",'+
  '"amount":9538,"tax_rate":"GST","tax_amount":954,"quantity":0}]},{"date":"2015-01-14","description":'+
  '"BCC TRANSFER STN FERNY FERNY GROVE","amount":-5146,"core_transaction_id":"000001722739935","quantity":0,'+
  '"allocations":[{"account_number":"3-8001","description":"BCC Transfer - DumpFees",'+
  '"amount":4678,"tax_rate":"GST","tax_amount":468,"quantity":0}]},{"date":"2015-01-19","description":'+
  '"OFFICEWORKS 0403 WINDSOR","amount":-43843,"core_transaction_id":"000001725051968","quantity":0,'+
  '"allocations":[{"account_number":"2-4000","description":"Officeworks - office supplies","amount":43843,'+
  '"tax_rate":"NA","tax_amount":0,"quantity":0}]},{"date":"2015-01-21","description":"DEAN CAMERON HIRE PLSTAFFORD",'+
  '"amount":-2610,"core_transaction_id":"000001727460773","quantity":0,"allocations":[{"account_number":'+
  '"1-1000","description":"DEAN CAMERON HIRE PL STAFFORD","amount":2610,"tax_rate":"NA","tax_amount":0,"quantity":0}]},'+
  '{"date":"2015-01-22","description":"FREEDOM WINDSOR WINDSOR","amount":-29430,"core_transaction_id":"000001728027375",'+
  '"quantity":0,"allocations":[{"account_number":"1-1200","description":"FREEDOMWINDSORWINDSOR","amount":29430,'+
  '"tax_rate":"NA","tax_amount":0,"quantity":0}]},{"date":"2015-01-22","description":"WINDOW WAREHOUSE MT GR MOUNT GRAVA",'+
  '"amount":-31350,"core_transaction_id":"000001728027376","quantity":0,"allocations":[{"account_number":"11800",'+
  '"description":"Window Warehouse","amount":28500,"tax_rate":"GST","tax_amount":2850,"quantity":0}]},{"date":"2015-0122",'+
  '"description":"S D JACOBS AND T M JAC BALLINA","amount":-101000,"core_transaction_id":"000001728027377",'+
  '"quantity":0,"allocations":[{"account_number":"1-1800","description":"S D JACOBS AND T M JACBALLINA","amount":91818,"tax_rate":'+
  '"GST","tax_amount":9182,"quantity":0}]},{"date":"2015-01-23","description":"BCC TRANSFER STN FERNY FERNY GROVE",'+
  '"amount":-6076,"core_transaction_id":"000001728648318","quantity":0,"allocations":[{"account_number":"5-2400","description":'+
  '"BCC Transfer - Dump Fees","amount":5524,"tax_rate":"GST","tax_amount":552,"quantity":0}]},{"date":"2015-0128",'+
  '"description":"PRINCIPAL CREDIT","amount":647041,"core_transaction_id":"000001731321682","quantity":0,"allocations":'+
  '[{"account_number":"5-3000","description":"Credit Card Payment","amount":588219,"tax_rate":"GST","tax_amount":58822,"quantity":0}]},'+
  '{"date":"2015-01-29","description":"LYNDONS WINDSOR 2 WINDSOR","amount":-11629,"core_transaction_id":"000001732007854",'+
  '"quantity":0,"allocations":[{"account_number":"3-9999","description":"LYNDONS WINDSOR2WINDSOR","amount":11629,"tax_rate":"NA",'+
  '"tax_amount":0,"quantity":0}]},{"date":"2015-01-30","description":"BP STAFFORD 7301 STAFFORD","amount":491,"core_transaction_id":'+
  '"000001732450436","quantity":0,"allocations":[{"account_number":"3-1200","description":"BP Staffoord - Fuel","amount":491,'+
  '"tax_rate":"NA","tax_amount":0,"quantity":0}]}'+*)
  ']}';

  ReadPracticeINI;
  PRACINI_CashbookAPILoginURL := 'https://test.secure.myob.com/oauth2/v1/Authorize';
  FPracticeLedger.EncryptedToken := '';
  FPracticeLedger.UnEncryptedToken := '';

  if FPracticeLedger.Login('cashbook.all.features@gmail.com','password1', aErr, aInvalidPass) then
  begin
    //RequestData: TlkJSONobject;  var aRespStr, aError: string;  aEncryptToken: Boolean; TypeOfTrans: TTransType
    MyClient.clExtra.cemyMYOBClientIDSelected := '0cf9f046-a6ff-42c4-9f42-03fd7d144002';

    RequestData := TlkJSON.ParseText(jSon);

    CheckTrue(FPracticeLedger.UploadToAPI(RequestData as TlkJsonObject, aRespStr, aErr, false, ttbank));
  end;
end;

procedure TestTPracticeLedger.TestImportCOA;
var
  NewChart : TChart;
  aErr : string;
  aInvalidPass : Boolean;
begin
  ReadPracticeINI;
  NewChart := TChart.Create(MyClient.ClientAuditMgr);
  AdminSystem := TSystemObj.Create;
  CurrUser := TAppUser.Create;
  MyClient := TClientObj.Create;
  try
    AdminSystem.fdFields.fdmyMYOBFirmID := '1-18PU1ZU';
    MyClient.clExtra.cemyMYOBClientIDSelected := '0cf9f046-a6ff-42c4-9f42-03fd7d144002';
    MyClient.clFields.clGST_Class_Codes[1] := 'GST';
    MyClient.clFields.clGST_Class_Codes[2] := 'FRE';
    PRACINI_CashbookAPILoginURL := 'https://test.secure.myob.com/oauth2/v1/Authorize';
    if FPracticeLedger.Login('cashbook.all.features@gmail.com','password1', aErr, aInvalidPass) then
    begin
      UserINI_myMYOB_Access_Token := FPracticeLedger.UnEncryptedToken;
      UserINI_myMYOB_Random_Key := FPracticeLedger.RandomKey;
      UserINI_myMYOB_Refresh_Token := FPracticeLedger.RefreshToken;
      UserINI_myMYOB_Expires_TokenAt := 0;
      CheckTrue(FPracticeLedger.FetchCOAFromAPI( NewChart ));
    end;
  finally
    FreeAndNil(NewChart);
    FreeAndNil(AdminSystem);
    FreeAndNil(CurrUser);
    FreeAndNil(MyClient);
  end;
end;

procedure TestTPracticeLedger.TestLoadBusinesses;
var
  aErr : string;
  aInvalidPass : Boolean;
  Businesses : TBusinesses;
begin
  Businesses := TBusinesses.Create;
  try
    ReadPracticeINI;
    PRACINI_CashbookAPIBusinessesURL := 'https://burwood.cashbook.dev.myob.com/api/businesses';
    PRACINI_CashbookAPILoginURL := 'https://test.secure.myob.com/oauth2/v1/Authorize';
    if FPracticeLedger.Login('cashbook.all.features@gmail.com','password1', aErr, aInvalidPass) then
      FPracticeLedger.GetBusinesses('1-18PU1ZU',ltPracticeLedger, Businesses, aErr);

    CheckTrue(Businesses.Count > 0);
  finally
    Businesses.Clear;
    FreeAndNil(Businesses);
  end;
end;

procedure TestTPracticeLedger.TestLoadFirms;
var
  aErr : string;
  aInvalidPass : Boolean;
  Firms : TFirms;
begin
  Firms := TFirms.Create;
  try
    ReadPracticeINI;
    PRACINI_CashbookAPIFirmsURL := 'https://burwood.cashbook.dev.myob.com/api/firms';
    PRACINI_CashbookAPILoginURL := 'https://test.secure.myob.com/oauth2/v1/Authorize';
    if FPracticeLedger.Login('cashbook.all.features@gmail.com','password1', aErr, aInvalidPass) then
      FPracticeLedger.GetFirms(Firms, aErr);
    CheckTrue(Firms.Count > 0);
  finally
    Firms.Clear;
    FreeAndNil(Firms);
  end;
end;

procedure TestTPracticeLedger.TestMYOBPLLogin;
var
  aInvalidPass : Boolean;
  aErr : string;
begin
  ReadPracticeINI;
  PRACINI_CashbookAPILoginURL := 'https://test.secure.myob.com/oauth2/v1/Authorize';
  FPracticeLedger.EncryptedToken := '';
  FPracticeLedger.UnEncryptedToken := '';
  if FPracticeLedger.Login('cashbook.all.features@gmail.com','password1', aErr, aInvalidPass) then
    CheckTrue(Trim(FPracticeLedger.EncryptedToken) <> '');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPracticeLedger.Suite);
end.


unit ECReportObj;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{
  Title:   Report Object

  Written: Copied from BK5 Aug 2001
  Authors: Matthew


  Notes:  The basic report object will no longer decend from a TBKReport,
          because this assumes that the report will be sent to a printer.

          The basic report object will handle the structure of the report ( columns etc)
          and the current data line.  These will be accessed from the Render Engine
          Object when output is required.  Any custom report settings will be loaded
          and saved here.  The report obj contains a pointer to the current report
          settings record being used, and the the PrintManagerObj currently being
          used.

          The report output will be generated by a Render Engine object that desends
          from a TRenderEngine object.  This allows us to create a different render
          engine object to send the output to different media, ie canvas or file.

          Process: Report To File
          ------------------------

          The new report is decended from the TBKPrintJob Object

          ------------------
          | TBKReport  |--------->   TRenderToFile
          ------------------
                  |
          ------------------
          |   TMyReport    |
          ------------------
                 .RenderDetail --------->    TRenderToFile.RenderDetail

                 .Self         <----------  TRenderToFile.Report

          A TRenderToFile object is created and all rendering requests are
          passed to in.  The RenderToFile object can see the column and header/footer
          information thru its Report property.

          To Generate the report the TBKReport obj creates a TRenderToFile object
          and then calls its own ECPrint method.  This calls the code to generate the
          detail of the report, all calls are passed on to the TRenderToFile object


          Process: Report To Canvas (print or preview)
          --------------------------

          The new report is decended from the TBKReport Object
          The TRenderToCanvas obj contains a TBKPrintJob Object which provides
          a canvas to draw on                                    ---------------
                                                                 | TECPrintController |
                                                                 ---------------
          ------------------                                            |
          | TBKReport      |--------->   TRenderToCanvas         --------------
          ------------------                 .PrintDoc --------  | TBKPrintJob |
                  |                                              --------------
          ------------------                                       .OnPrintMethod
          |   TMyReport    |                          <--------    .OnBeforePrint
          ------------------                                       .OnNewPage

                 .RenderDetail --------->    .RenderDetail
                                                 (Paint on to .PrintDoc.Canvas)

                 .Self         <----------   .Report

           The TRenderToCanvas.Report property provides the link back to the
           Header/Footer and columns details for the Report.

           The TRenderToCanvas object handles calls routines in the ECPrinter obj
           for loading and retrieving the printer/report settings.  Report setup is
           handled by the ECPrinter obj.

           To generate a report the TBKReport obj creates a TRenderToCanvas
           obj and then calls the print or preview method of the TRenderToCanvas obj.
           This creates a TECPrint method and calls Print or Preview.
           TBKPrintJob.Create output is called, this calls the OnBeforePrint method
           and the OnNewPage method to initialise the document and the render to
           headers and footer.  When the report is ready for the detail it calls
           the OnPrintMethod.

           The OnPrintMethod of the TBKPrintJob obj links to a CallReportOnPrint
           method in the TRenderToCanvas object.  This calls the ECPrint Method
           of the report.  This allows the TBKPrintJob object to call the code
           which creates the detail of the report.

          Process: Report Setup
          ------------------------
          To Setup a Report call the SetupReport method with an appropriate
          destination. At the moment this will only accept printer setup as
          there are currently no settings for file.

          Printer/Screen

          SetupReport will pass the call on to a TBKPrintJob object.


}
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

interface
uses
   windows,
   classes,
   graphics,
   dialogs,
   forms,
   sysutils,
   printers,
   moneydef,

   repcols,           //report column list
   RenderEngineObj,   //base report engine object
   ecReportDefs,      //type and constant definitions
   BKPrintJob;        //access to printers and printing events, access
                      //bkprintcontroller, newreportutils, qrprntr


type TProcedurePtr = procedure(Sender : TObject);

type
  TBKReport = class( TObject)
  private
    FColumns            : TReportColumns;
    FHeader             : THeaderFooterCollection;
    FFooter             : THeaderFooterCollection;

    FOnECPrint          : TProcedurePtr;

    procedure SetOnECPrint(const Value: TProcedurePtr);
  protected
    FCurrDetail         : TStringList;
    RenderEngine        : TCustomRenderEngine;  //use base class, don't know
                                                //which one we will need at creation
  public
    ReportSettings      : TWindows_Report_Setting_Rec;

    constructor Create; virtual;
    destructor Destroy; override;

    procedure AddHeader(aHeader : THeaderFooterLine);
    procedure AddFooter(aFooter : THeaderFooterLine);
    procedure AddColumn (aCol : TReportColumn);
    //Routines for adding data to current line, essentially these are formating routines
    procedure PutString ( aString : string);
    procedure PutInteger( aInteger : longint);
    procedure PutCurrency( aCurr : currency);
    procedure PutCurrencyTotal(aCurr : currency);
    procedure PutMoney (aMoney : money);
    procedure PutMoneyTotal (aMoney : money);
    procedure PutMoneyDontAdd (aMoney : money);
    procedure PutQuantity(aMoney : money);
    procedure SkipColumn;
    //External routines for actually putting the output on the canvas, rely on protected
    //routines above, they are provided here for compatibility but could be replace in the
    //calling code with a call to RenderEngine.RenderDetailHeader etc.
    procedure RequireLines(lines :integer);
    procedure RenderDetailHeader;
    procedure RenderDetailLine;
    procedure RenderDetailSectionTotal;
    procedure RenderDetailSubTotal;
    procedure RenderDetailGrandTotal;
    procedure RenderTitleLine(Text : string);
    procedure RenderTextLine(Text:string);
    procedure RenderRuledLine;
    procedure SingleUnderLine;
    procedure DoubleUnderLine;
    procedure ReportNewPage;
    //Access to Report Settings
    //procedure...
    //User Print settings Object
    property  OnECPrint          : TProcedurePtr read FOnECPrint write SetOnECPrint;
    //Generate output of report
    procedure Generate( const Dest : TReportDest);
    //Generate report to file, special case accepts filename and type.  User is not asked
    //    procedure GenerateToFile( const FileName : string; const FileFormat : integer);

    //Setup report settings
    procedure SetupReport( const Dest : TReportDest);
    //properties for external viewing
    property CurrDetail          : TStringList read FCurrDetail;
    property Columns             : TReportColumns read FColumns;
    property Header              : THeaderFooterCollection read FHeader;
    property Footer              : THeaderFooterCollection read FFooter;
    procedure ECPrint; virtual;
  end;

Const
     SKIPFIELD = '<SKIP>';
     DATEFIELD = '<DATE>';
     PAGEFIELD = '<PAGE>';
     MISSINGFIELD = '<MISSING>';

//******************************************************************************
implementation
uses
   ReportToCanvas,
   ecMessageBoxUtils;

const
   UnitName = 'NewReportObj';

{ TBKReport }

procedure TBKReport.AddColumn(aCol: TReportColumn);
begin
   FColumns.Insert(aCol);
end;

procedure TBKReport.AddFooter(aFooter: THeaderFooterLine);
begin
   FFooter.Insert(aFooter);
end;

procedure TBKReport.AddHeader(aHeader: THeaderFooterLine);
begin
   FHeader.Insert(aHeader);
end;

procedure TBKReport.ECPrint;
begin
   if Assigned(FOnECPrint) then
       FOnECPrint(Self);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
constructor TBKReport.Create;
begin
   //Current Detail Line
   FCurrDetail := TStringList.Create;
   //Init Headers/Footers
   FHeader    := THeaderFooterCollection.Create;
   FFooter    := THeaderFooterCollection.Create;
   //Init Columns
   FColumns   := TReportColumns.Create;
   //set default report settings
   FillChar( ReportSettings, SizeOf( TWindows_Report_Setting_Rec), #0);
   with ReportSettings do begin
      s7Report_Name      := 'Report';
      s7Printer_Name     := DEFAULT_PRINTER_ID;
      s7Paper            := DMPAPER_A4;
      s7Bin              := DMBIN_AUTO;
      s7Orientation      := BK_PORTRAIT;
      s7Base_Font_Name   := 'Arial';
      s7Base_Font_Size   := 8;
      s7Base_Font_Style  := 0;
      s7Is_Default       := true;
   end;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
destructor TBKReport.Destroy;
begin
   FColumns.Free;
   FHeader.Free;
   FFooter.Free;
   FCurrDetail.Free;
   inherited Destroy;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.Generate(const Dest: TReportDest);
//Create the correct rendering engine object
const
   ThisMethodName = 'TReport.Generate';
var
   sMsg       : string;
begin
   try
      try
         case Dest of
            rdScreen  : begin
               //Show status form here because it takes some time to create the render engine and printer object
               //will be cleared by the OnAfterPrint method when printing completed
               RenderEngine := TRenderToCanvasEng.Create(Self);
               TRenderToCanvasEng(RenderEngine).Preview;
            end;
            rdPrinter : begin
               //Show status form here because it takes some time to create the render engine and printer object
               //will be cleared by the OnAfterPrint method when printing completed
               RenderEngine := TRenderToCanvasEng.Create(Self);
               TRenderToCanvasEng(RenderEngine).Print;
            end;
            rdFile    : begin    //not supported
{
               //Set default filename
               FileName := ReportSettings.s7Report_Name+ rfFileExtn[ rfCSV];

               //Ask for format and filename
               if GenerateReportTo( Filename, FileFormat) then begin

                  case FileFormat of
                     rfCSV        : RenderEngine := TRenderToFileCSV.Create( Self, Filename);
                     rfFixedWidth : begin
                        RenderEngine := TRenderToFileFixed.Create( Self, Filename);
                        //Use reports default orientation to determine max line width
                        if GetBKReportDefaultOrientation(ReportSettings.s7Report_Name) = poPortrait then
                           TRenderToFileFixed( RenderEngine).MaxLineWidth := 132
                        else
                           TRenderToFileFixed( RenderEngine).MaxLineWidth := 160;
                     end;
                     //rfWord
                     rfExcel      : RenderEngine := TRenderToFileExcel.Create( Self, '' );
                  end;
                  if Assigned( RenderEngine) then begin
                     RenderEngine.Generate;
                     case FileFormat of
                        rfCSV, rfFixedWidth : begin
                           //Clear Application Status window
                           ClearStatus;
                           //determine full path name of report
                           if ExtractFilePath( Filename) = '' then begin
                              //the filename has no path info so add the current path
                              Filename := GetCurrentDir + '\' + Filename;
                           end;
                           HelpfulInfoMsg('Report saved to "'+ FileName+'"',0);
                        end;
                        rfExcel : begin
                           //Clear Application Status window
                           ClearStatus;
                           HelpfulInfoMsg('Click OK if you have finished using Excel.',0);
                        end;
                     end; //case
                  end;
               end;}
            end;
         end;
      except
         {on e : EInOutError do begin
            sMsg := Format( 'Error saving report to "%s" - %s', [FileName, E.Message ] );
         end;
         }
         on E : EPrinter do begin
            sMsg := Format( 'Error Generating Report %s - %s', [ReportSettings.s7Report_Name,
                                                                E.Message ] );
            ErrorMessage( sMsg);
         end;

         {on E : EOleError do begin
            sMsg := Format( 'Error Generating Report %s - %s', [ ReportSettings.s7Report_Name,
                                                                    E.Message ] );
         end;}
      end;
   finally
      //Make sure memory is freed before leaving
      RenderEngine.Free;
   end;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.SetupReport(const Dest: TReportDest);
//Call the correct setup routines for the destination given
const
   ThisMethodName = 'TReport.Generate';
var
   PrintDoc   : TBKPrintJob;
begin
   case Dest of
      rdScreen, rdPrinter  : begin
         PrintDoc := TBKPrintJob.Create;
         try
            PrintDoc.LoadSettingsFrom( ReportSettings);
            PrintDoc.SetupReport;
            //update settings if changed
            if PrintDoc.ReportSettingsChanged then begin
              //Update report settings with values from PrintDoc object
              PrintDoc.SaveSettingsTo( ReportSettings);
              //Set save flag
              ReportSettings.s7Save_Required := true;
            end;
         finally
            PrintDoc.Free;
         end;
      end;
      rdFile    : begin
         //Nothing to setup for file yet
      end;
   end;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.SetOnECPrint(const Value: TProcedurePtr);
begin
   FOnECPrint := Value;
end;

//******************************************************************************
procedure TBKReport.PutCurrency(aCurr: currency);
var
   newIndex : integer;
begin
    newIndex := FCurrDetail.Count;  { 1 more than the last}
    with FColumns.Report_Column_At(newIndex) do
    begin
      FCurrDetail.add(FormatFloat(FormatString,aCurr));
      SectionTotal := SectionTotal + aCurr;
      SubTotal     := SubTotal + aCurr;
      GrandTotal   := GrandTotal + aCurr;
    end;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutCurrencyTotal(aCurr: currency);
var
   newIndex : integer;
begin
    newIndex := FCurrDetail.Count;  { 1 more than the last}
    with FColumns.Report_Column_At(newIndex) do
    begin
      FCurrDetail.add(FormatFloat(TotalFormat,aCurr));
      SectionTotal := SectionTotal + aCurr;
      SubTotal     := SubTotal + aCurr;
      GrandTotal   := GrandTotal + aCurr;
    end;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutInteger(aInteger: Integer);
begin
   FCurrDetail.Add(inttoStr(aInteger));
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutMoney(aMoney: money);
var
   currAmount : currency;
begin
   currAmount := aMoney/100;
   PutCurrency(currAmount);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutMoneyDontAdd(aMoney: money);
var
  newIndex : integer;
begin
   newIndex := FCurrDetail.Count;  { 1 more than the last}
   with FColumns.Report_Column_At(newIndex) do
       FCurrDetail.add(FormatFloat(FormatString,aMoney/100));
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutMoneyTotal(aMoney: money);
var
   currAmount : currency;
begin
   currAmount := aMoney/100;
   PutCurrencyTotal(currAmount);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutQuantity(aMoney: money);
var
   currAmount : currency;
begin
   currAmount := aMoney/10000;
   PutCurrency(currAmount);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.PutString(aString: string);
begin
   FCurrDetail.Add(aString);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.SkipColumn;
begin
   FCurrDetail.Add('');
end;
//******************************************************************************
procedure TBKReport.RenderDetailGrandTotal;
begin
   RenderEngine.RenderDetailGrandTotal;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderDetailHeader;
begin
   RenderEngine.RenderDetailHeader;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderDetailLine;
begin
   RenderEngine.RenderDetailLine;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderDetailSectionTotal;
begin
   RenderEngine.RenderDetailSectionTotal;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderDetailSubTotal;
begin
   RenderEngine.RenderDetailSubTotal;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderRuledLine;
begin
   RenderEngine.RenderRuledLine;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderTextLine(Text: string);
begin
   RenderEngine.RenderTextLine( Text);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RenderTitleLine(Text: string);
begin
   RenderEngine.RenderTitleLine( Text);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.ReportNewPage;
begin
   RenderEngine.ReportNewPage;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.SingleUnderLine;
begin
   RenderEngine.SingleUnderLine;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.DoubleUnderLine;
begin
   RenderEngine.DoubleUnderLine;
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
procedure TBKReport.RequireLines(lines: integer);
begin
   RenderEngine.RequireLines( lines);
end;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
{procedure TBKReport.GenerateToFile(const FileName: string; const FileFormat: Integer);
//Create the file rendering object.  Assumes that valid filename and format are given
//Called when generating scheduled reports for delivery via email
const
   ThisMethodName = 'TReport.GenerateToFile';
var
   sMsg       : string;
begin
   try
      try
         //create correct rendering object for selected file format
         case FileFormat of
            rfCSV        : RenderEngine := TRenderToFileCSV.Create( Self, Filename);
            rfFixedWidth : begin
               RenderEngine := TRenderToFileFixed.Create( Self, Filename);
               //Use reports default orientation to determine max line width
               if GetBKReportDefaultOrientation(ReportSettings.s7Report_Name) = poPortrait then
                  TRenderToFileFixed( RenderEngine).MaxLineWidth := 132
               else
                  TRenderToFileFixed( RenderEngine).MaxLineWidth := 160;
            end;
            //rfWord
            //rfExcel
         end;
         if Assigned( RenderEngine) then begin
            RenderEngine.Generate;
            //Clear Application Status window
            ClearStatus;
         end;
      except
         on e : EInOutError do begin
            sMsg := Format( 'Error saving report to "%s" - %s', [FileName, E.Message ] );

         end;
      end;
   finally
      //Make sure memory is freed before leaving
      RenderEngine.Free;
      ClearStatus;
   end;
end;
}
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
end.

Unit SY_XMLHelper;
// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
// ----------------------------------------------------------------------------
interface
uses
	XMLIntf,
	SYdefs;

type

TPractice_Details_RecHelper = record helper for TPractice_Details_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TSystem_Disk_Log_RecHelper = record helper for TSystem_Disk_Log_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TUser_RecHelper = record helper for TUser_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TSystem_Bank_Account_RecHelper = record helper for TSystem_Bank_Account_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TClient_File_RecHelper = record helper for TClient_File_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TFile_Access_Mapping_RecHelper = record helper for TFile_Access_Mapping_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TClient_Account_Map_RecHelper = record helper for TClient_Account_Map_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TGroup_RecHelper = record helper for TGroup_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TClient_Type_RecHelper = record helper for TClient_Type_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TAudit_Trail_RecHelper = record helper for TAudit_Trail_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TProvisional_Entries_Log_RecHelper = record helper for TProvisional_Entries_Log_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TSystem_Memorisation_List_RecHelper = record helper for TSystem_Memorisation_List_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TTPR_Supplier_Detail_RecHelper = record helper for TTPR_Supplier_Detail_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


// ----------------------------------------------------------------------------
implementation
uses
	WebUtils,
	Variants,
	SysUtils;


procedure ReRaise(E: Exception; Doing: string);
begin
	raise exception.Create( format('Error : %s While : %s',[E.Message, Doing]));
end;


// ----------------------------------------------------------------------------

class function TPractice_Details_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYPracticeDetails';
end;


function TPractice_Details_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'PracticeNameforReports', fdPractice_Name_for_Reports);
	SetTextAttr(Result, 'PracticeEMailAddress', fdPractice_EMail_Address);
	SetIntAttr(Result, 'AccountingSystemUsed', fdAccounting_System_Used);
	SetIntAttr(Result, 'Country', fdCountry);
	SetTextAttr(Result, 'LoadClientFilesFrom', fdLoad_Client_Files_From);
	SetTextAttr(Result, 'SaveClientFilesTo', fdSave_Client_Files_To);
	PNode := Result.AddChild('ShortNames');
	M :=  Low(fdShort_Name);
	for I := Low(fdShort_Name) to High(fdShort_Name) do
		if  fdShort_Name[I] > '' then
			M := I;
	for I := Low(fdShort_Name) to M do begin
		CNode := PNode.AddChild('ShortName');
		CNode.NodeValue := fdShort_Name[I];
	end;
	PNode := Result.AddChild('LongNames');
	M :=  Low(fdLong_Name);
	for I := Low(fdLong_Name) to High(fdLong_Name) do
		if  fdLong_Name[I] > '' then
			M := I;
	for I := Low(fdLong_Name) to M do begin
		CNode := PNode.AddChild('LongName');
		CNode.NodeValue := fdLong_Name[I];
	end;
	PNode := Result.AddChild('GSTClassNames');
	M :=  Low(fdGST_Class_Names);
	for I := Low(fdGST_Class_Names) to High(fdGST_Class_Names) do
		if  fdGST_Class_Names[I] > '' then
			M := I;
	for I := Low(fdGST_Class_Names) to M do begin
		CNode := PNode.AddChild('GSTClassName');
		CNode.NodeValue := fdGST_Class_Names[I];
	end;
	SetArray(Result, 'GSTClassTypes', fdGST_Class_Types);
	PNode := Result.AddChild('GSTAccountCodes');
	M :=  Low(fdGST_Account_Codes);
	for I := Low(fdGST_Account_Codes) to High(fdGST_Account_Codes) do
		if  fdGST_Account_Codes[I] > '' then
			M := I;
	for I := Low(fdGST_Account_Codes) to M do begin
		CNode := PNode.AddChild('GSTAccountCode');
		CNode.NodeValue := fdGST_Account_Codes[I];
	end;
	PNode := result.AddChild('GSTRates');
	M :=  Low(fdGST_Rates);
	for I := Low(fdGST_Rates) to High(fdGST_Rates) do
		for J := Low(fdGST_Rates[I]) to High(fdGST_Rates[I]) do
			if fdGST_Rates[I,J] > 0 then begin
				M := I;
				Break;
			end;
	for I := low(fdGST_Rates) to M do begin
		CNode := PNode.AddChild('GSTRates');
		CNode := CNode.AddChild('GSTRates');
		for J := Low(fdGST_Rates[I]) to High(fdGST_Rates[I]) do begin
			CCNode := CNode.AddChild('GSTRate');
			CCNode.NodeValue := (fdGST_Rates[I,J]);
		end;
	end;
	SetArray(Result, 'GSTAppliesFroms', fdGST_Applies_From);
	SetIntAttr(Result, 'DateofLastEntryReceived', fdDate_of_Last_Entry_Received);
	SetIntAttr(Result, 'PrintReportsUpTo', fdPrint_Reports_Up_To);
	SetBoolAttr(Result, 'UseBankLinkOnline', fdUse_BankLink_Online);
	SetBoolAttr(Result, 'PrintStaffMemberHeaderPage', fdPrint_Staff_Member_Header_Page);
	SetBoolAttr(Result, 'PrintClientHeaderPage', fdPrint_Client_Header_Page);
	SetIntAttr(Result, 'PINNumber', fdPIN_Number);
	SetTextAttr(Result, 'BankLinkCode', fdBankLink_Code);
	SetIntAttr(Result, 'DiskSequenceNo', fdDisk_Sequence_No);
	SetIntAttr(Result, 'MagicNumber', fdMagic_Number);
	SetIntAttr(Result, 'CodingReportStyle', fdCoding_Report_Style);
	SetIntAttr(Result, 'CodingReportSortOrder', fdCoding_Report_Sort_Order);
	SetIntAttr(Result, 'CodingReportEntrySelection', fdCoding_Report_Entry_Selection);
	SetIntAttr(Result, 'CodingReportBlankLines', fdCoding_Report_Blank_Lines);
	SetBoolAttr(Result, 'CodingReportRuleLine', fdCoding_Report_Rule_Line);
	SetIntAttr(Result, 'BankAccountLRNCounter', fdBank_Account_LRN_Counter);
	SetIntAttr(Result, 'UserLRNCounter', fdUser_LRN_Counter);
	SetIntAttr(Result, 'TransactionLRNCounter', fdTransaction_LRN_Counter);
	SetIntAttr(Result, 'ClientFileLRNCounter', fdClient_File_LRN_Counter);
	SetTextAttr(Result, 'BankLinkConnectPassword', fdBankLink_Connect_Password);
	SetTextAttr(Result, 'OldGSTClassCodes', fdOld_GST_Class_Codes);
	SetTextAttr(Result, 'AccountCodeMask', fdAccount_Code_Mask);
	SetIntAttr(Result, 'FileVersion', fdFile_Version);
	SetTextAttr(Result, 'SchedRepEmailSubject', fdSched_Rep_Email_Subject);
	SetTextAttr(Result, 'OldSchedRepEmailLine1', fdOld_Sched_Rep_Email_Line1);
	SetTextAttr(Result, 'OldSchedRepEmailLine2', fdOld_Sched_Rep_Email_Line2);
	PNode := Result.AddChild('OLDBASSpecialAccounts');
	M :=  Low(fdOLD_BAS_Special_Accounts);
	for I := Low(fdOLD_BAS_Special_Accounts) to High(fdOLD_BAS_Special_Accounts) do
		if  fdOLD_BAS_Special_Accounts[I] > '' then
			M := I;
	for I := Low(fdOLD_BAS_Special_Accounts) to M do begin
		CNode := PNode.AddChild('OLDBASSpecialAccount');
		CNode.NodeValue := fdOLD_BAS_Special_Accounts[I];
	end;
	PNode := Result.AddChild('GSTClassCodes');
	M :=  Low(fdGST_Class_Codes);
	for I := Low(fdGST_Class_Codes) to High(fdGST_Class_Codes) do
		if  fdGST_Class_Codes[I] > '' then
			M := I;
	for I := Low(fdGST_Class_Codes) to M do begin
		CNode := PNode.AddChild('GSTClassCode');
		CNode.NodeValue := fdGST_Class_Codes[I];
	end;
	SetArray(Result, 'BASFieldNumbers', fdBAS_Field_Number);
	SetArray(Result, 'BASFieldSources', fdBAS_Field_Source);
	PNode := Result.AddChild('BASFieldAccountCodes');
	M :=  Low(fdBAS_Field_Account_Code);
	for I := Low(fdBAS_Field_Account_Code) to High(fdBAS_Field_Account_Code) do
		if  fdBAS_Field_Account_Code[I] > '' then
			M := I;
	for I := Low(fdBAS_Field_Account_Code) to M do begin
		CNode := PNode.AddChild('BASFieldAccountCode');
		CNode.NodeValue := fdBAS_Field_Account_Code[I];
	end;
	SetArray(Result, 'BASFieldBalances', fdBAS_Field_Balance);
	SetBoolAttr(Result, 'SchedRepIncludeEmail', fdSched_Rep_Include_Email);
	SetBoolAttr(Result, 'SchedRepEmailOnly', fdSched_Rep_Email_Only);
	SetBoolAttr(Result, 'SchedRepIncludePrinter', fdSched_Rep_Include_Printer);
	SetBoolAttr(Result, 'SchedRepIncludeFax', fdSched_Rep_Include_Fax);
	SetBoolAttr(Result, 'SchedRepSendFaxOffPeak', fdSched_Rep_Send_Fax_Off_Peak);
	SetArray(Result, 'EnhancedSoftwareOptions', fdEnhanced_Software_Options);
	SetBoolAttr(Result, 'SchedRepIncludeECoding', fdSched_Rep_Include_ECoding);
	SetTextAttr(Result, 'SchedRepCoverPageName', fdSched_Rep_Cover_Page_Name);
	SetTextAttr(Result, 'SchedRepCoverPageSubject', fdSched_Rep_Cover_Page_Subject);
	SetTextAttr(Result, 'SchedRepCoverPageMessage', fdSched_Rep_Cover_Page_Message);
	SetTextAttr(Result, 'SchedRepEmailMessage', fdSched_Rep_Email_Message);
	SetIntAttr(Result, 'DownloadReportOptions', fdDownload_Report_Options);
	SetBoolAttr(Result, 'DownloadReportHideDeleted', fdDownload_Report_Hide_Deleted);
	SetBoolAttr(Result, 'BulkExportEnabled', fdBulk_Export_Enabled);
	SetIntAttr(Result, 'SpareByte0', fdSpare_Byte_0);
	SetTextAttr(Result, 'BulkExportCode', fdBulk_Export_Code);
	SetBoolAttr(Result, 'SchedRepIncludeCSVExport', fdSched_Rep_Include_CSV_Export);
	SetIntAttr(Result, 'TaxInterfaceUsed', fdTax_Interface_Used);
	SetTextAttr(Result, 'SaveTaxFilesTo', fdSave_Tax_Files_To);
	SetIntAttr(Result, 'LastDiskImageVersion', fdLast_Disk_Image_Version);
	SetTextAttr(Result, 'PracticeWebSite', fdPractice_Web_Site);
	SetTextAttr(Result, 'PracticePhone', fdPractice_Phone);
	SetTextAttr(Result, 'PracticeLogoFilename', fdPractice_Logo_Filename);
	SetTextAttr(Result, 'SchedRepPrintCustomDocGUID', fdSched_Rep_Print_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepPrintCustomDoc', fdSched_Rep_Print_Custom_Doc);
	SetIntAttr(Result, 'LastChargeFileDate', fdLast_ChargeFile_Date);
	SetIntAttr(Result, 'AuditRecordID', fdAudit_Record_ID);
	SetTextAttr(Result, 'SchedRepFaxCustomDocGUID', fdSched_Rep_Fax_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepFaxCustomDoc', fdSched_Rep_Fax_Custom_Doc);
	SetTextAttr(Result, 'SpareText3', fdSpare_Text_3);
	SetTextAttr(Result, 'SchedRepEmailCustomDocGUID', fdSched_Rep_Email_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepEmailCustomDoc', fdSched_Rep_Email_Custom_Doc);
	SetTextAttr(Result, 'SpareText5', fdSpare_Text_5);
	SetTextAttr(Result, 'SchedRepBooksCustomDocGUID', fdSched_Rep_Books_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepBooksCustomDoc', fdSched_Rep_Books_Custom_Doc);
	SetIntAttr(Result, 'SpareInteger3', fdSpare_Integer_3);
	SetIntAttr(Result, 'SpareInteger4', fdSpare_Integer_4);
	SetTextAttr(Result, 'SchedRepNotesCustomDocGUID', fdSched_Rep_Notes_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepNotesCustomDoc', fdSched_Rep_Notes_Custom_Doc);
	SetTextAttr(Result, 'SpareText8', fdSpare_Text_8);
	SetTextAttr(Result, 'SchedRepWebNotesCustomDocGUID', fdSched_Rep_WebNotes_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepWebNotesCustomDoc', fdSched_Rep_WebNotes_Custom_Doc);
	SetIntAttr(Result, 'SpareInteger5', fdSpare_Integer_5);
	SetIntAttr(Result, 'SpareInteger6', fdSpare_Integer_6);
	SetTextAttr(Result, 'SpareText10', fdSpare_Text_10);
	SetIntAttr(Result, 'SpareByte7', fdSpare_Byte_7);
	SetTextAttr(Result, 'SpareText11', fdSpare_Text_11);
	SetTextAttr(Result, 'SpareText12', fdSpare_Text_12);
	SetIntAttr(Result, 'SpareByte8', fdSpare_Byte_8);
	SetTextAttr(Result, 'SpareText13', fdSpare_Text_13);
	SetTextAttr(Result, 'BankLinkOnlineConfig', fdBankLink_Online_Config);
	SetIntAttr(Result, 'SpareByte9', fdSpare_Byte_9);
	SetIntAttr(Result, 'SpareInteger7', fdSpare_Integer_7);
	SetIntAttr(Result, 'SpareInteger8', fdSpare_Integer_8);
	SetTextAttr(Result, 'SchedRepWebNotesSubject', fdSched_Rep_WebNotes_Subject);
	SetIntAttr(Result, 'SpareByte10', fdSpare_Byte_10);
	SetTextAttr(Result, 'SchedRepwebNotesMessage', fdSched_Rep_webNotes_Message);
	SetIntAttr(Result, 'SpareByte11', fdSpare_Byte_11);
	SetTextAttr(Result, 'SchedRepHeaderMessage', fdSched_Rep_Header_Message);
	SetTextAttr(Result, 'SchedRepBNotesSubject', fdSched_Rep_BNotes_Subject);
	SetTextAttr(Result, 'SchedRepBNotesMessage', fdSched_Rep_BNotes_Message);
	SetBoolAttr(Result, 'SpareBoolean4', fdSpare_Boolean_4);
	SetIntAttr(Result, 'TaskTrackingPromptType', fdTask_Tracking_Prompt_Type);
	SetBoolAttr(Result, 'SpareBool1', fdSpare_Bool_1);
	SetBoolAttr(Result, 'SpareBool2', fdSpare_Bool_2);
	SetIntAttr(Result, 'SpareInteger9', fdSpare_Integer_9);
	SetIntAttr(Result, 'SchedRepFaxTransport', fdSched_Rep_Fax_Transport);
	SetBoolAttr(Result, 'SchedRepIncludeWebX', fdSched_Rep_Include_WebX);
	SetIntAttr(Result, 'WebExportFormat', fdWeb_Export_Format);
	SetBoolAttr(Result, 'ForceLogin', fdForce_Login);
	SetTextAttr(Result, 'LoginBitmapFilename', fdLogin_Bitmap_Filename);
	SetBoolAttr(Result, 'AutoPrintSchedRepSummary', fdAuto_Print_Sched_Rep_Summary);
	SetBoolAttr(Result, 'IgnoreQuantityInDownload', fdIgnore_Quantity_In_Download);
	SetIntAttr(Result, 'SpareBoolean1', fdSpare_Boolean_1);
	SetIntAttr(Result, 'spareBoolean2', fdspare_Boolean_2);
	SetBoolAttr(Result, 'CopyDissectionNarration', fdCopy_Dissection_Narration);
	SetBoolAttr(Result, 'RoundCashflowReports', fdRound_Cashflow_Reports);
	SetBoolAttr(Result, 'UseXlonChartOrder', fdUse_Xlon_Chart_Order);
	SetBoolAttr(Result, 'ExtractMultipleAccountsPA', fdExtract_Multiple_Accounts_PA);
	SetBoolAttr(Result, 'ExtractJournalAccountsPA', fdExtract_Journal_Accounts_PA);
	SetBoolAttr(Result, 'ExtractQuantity', fdExtract_Quantity);
	SetBoolAttr(Result, 'ReportsNewPage', fdReports_New_Page);
	SetIntAttr(Result, 'PrintMergeReportSummary', fdPrint_Merge_Report_Summary);
	SetIntAttr(Result, 'EmailMergeReportSummary', fdEmail_Merge_Report_Summary);
	SetIntAttr(Result, 'MaximumNarrationExtract', fdMaximum_Narration_Extract);
	SetBoolAttr(Result, 'SchedRepIncludeCheckOut', fdSched_Rep_Include_CheckOut);
	SetTextAttr(Result, 'SchedRepCheckOutSubject', fdSched_Rep_CheckOut_Subject);
	SetTextAttr(Result, 'SchedRepCheckOutMessage', fdSched_Rep_CheckOut_Message);
	SetBoolAttr(Result, 'SchedRepIncludeBusinessProducts', fdSched_Rep_Include_Business_Products);
	SetTextAttr(Result, 'SchedRepBusinessProductsSubject', fdSched_Rep_Business_Products_Subject);
	SetTextAttr(Result, 'SchedRepBusinessProductsMessage', fdSched_Rep_Business_Products_Message);
	SetBoolAttr(Result, 'ReplaceNarrationWithPayee', fdReplace_Narration_With_Payee);
	SetTextAttr(Result, 'LastExportChargesSavedTo', fdLast_Export_Charges_Saved_To);
	SetTextAttr(Result, 'ManualAccountXML', fdManual_Account_XML);
	SetBoolAttr(Result, 'UpdatesPending', fdUpdates_Pending);
	SetTextAttr(Result, 'UpdateServerForOffsites', fdUpdate_Server_For_Offsites);
	SetBoolAttr(Result, 'CollectUsageData', fdCollect_Usage_Data);
	SetBoolAttr(Result, 'FixedChargeIncrease', fdFixed_Charge_Increase);
	SetBoolAttr(Result, 'PercentageChargeIncrease', fdPercentage_Charge_Increase);
	SetInt64Attr(Result, 'FixedDollarAmount', fdFixed_Dollar_Amount);
	SetInt64Attr(Result, 'DistributedDollarAmount', fdDistributed_Dollar_Amount);
	SetInt64Attr(Result, 'PercentageIncreaseAmount', fdPercentage_Increase_Amount);
	SetIntAttr(Result, 'ExtractQuantityDecimalPlaces', fdExtract_Quantity_Decimal_Places);
	SetTextAttr(Result, 'ExportChargesRemarks', fdExport_Charges_Remarks);
	SetTextAttr(Result, 'SystemReportPassword', fdSystem_Report_Password);
	SetIntAttr(Result, 'PrintReportsFrom', fdPrint_Reports_From);
	SetIntAttr(Result, 'HighestDateEverDownloaded', fdHighest_Date_Ever_Downloaded);
	SetBoolAttr(Result, 'AutoRetrieveNewTransactions', fdAuto_Retrieve_New_Transactions);
	SetTextAttr(Result, 'CodingFont', fdCoding_Font);
	SetIntAttr(Result, 'SortReportsOption', fdSort_Reports_Option);
	SetIntAttr(Result, 'SpareByte12', fdSpare_Byte_12);
	SetIntAttr(Result, 'GroupLRNCounter', fdGroup_LRN_Counter);
	SetIntAttr(Result, 'ClientTypeLRNCounter', fdClient_Type_LRN_Counter);
	PNode := result.AddChild('TAXAppliesFroms');
	M :=  Low(fdTAX_Applies_From);
	for I := Low(fdTAX_Applies_From) to High(fdTAX_Applies_From) do
		for J := Low(fdTAX_Applies_From[I]) to High(fdTAX_Applies_From[I]) do
			if fdTAX_Applies_From[I,J] > 0 then begin
				M := I;
				Break;
			end;
	for I := low(fdTAX_Applies_From) to M do begin
		CNode := PNode.AddChild('TAXAppliesFroms');
		CNode := CNode.AddChild('TAXAppliesFroms');
		for J := Low(fdTAX_Applies_From[I]) to High(fdTAX_Applies_From[I]) do begin
			CCNode := CNode.AddChild('TAXAppliesFrom');
			CCNode.NodeValue := (fdTAX_Applies_From[I,J]);
		end;
	end;
	PNode := result.AddChild('TAXRates');
	M :=  Low(fdTAX_Rates);
	for I := Low(fdTAX_Rates) to High(fdTAX_Rates) do
		for J := Low(fdTAX_Rates[I]) to High(fdTAX_Rates[I]) do
			if fdTAX_Rates[I,J] > 0 then begin
				M := I;
				Break;
			end;
	for I := low(fdTAX_Rates) to M do begin
		CNode := PNode.AddChild('TAXRates');
		CNode := CNode.AddChild('TAXRates');
		for J := Low(fdTAX_Rates[I]) to High(fdTAX_Rates[I]) do begin
			CCNode := CNode.AddChild('TAXRate');
			CCNode.NodeValue := (fdTAX_Rates[I,J]);
		end;
	end;
	SetIntAttr(Result, 'SuperfundSystem', fdSuperfund_System);
	SetTextAttr(Result, 'SuperfundCodeMask', fdSuperfund_Code_Mask);
	SetTextAttr(Result, 'LoadClientSuperFilesFrom', fdLoad_Client_Super_Files_From);
	SetTextAttr(Result, 'SaveClientSuperFilesTo', fdSave_Client_Super_Files_To);
	SetIntAttr(Result, 'SortReportsBy', fdSort_Reports_By);
	SetInt64Attr(Result, 'SetFixedDollarAmount', fdSet_Fixed_Dollar_Amount);
	SetBoolAttr(Result, 'PrintGroupHeaderPage', fdPrint_Group_Header_Page);
	SetBoolAttr(Result, 'PrintClientTypeHeaderPage', fdPrint_Client_Type_Header_Page);
	SetIntAttr(Result, 'PracticeManagementSystem', fdPractice_Management_System);
	SetArray(Result, 'AutomaticTaskCreationFlags', fdAutomatic_Task_Creation_Flags);
	SetArray(Result, 'AutomaticTaskReminderDelays', fdAutomatic_Task_Reminder_Delay);
	SetArray(Result, 'AutomaticTaskClosingFlags', fdAutomatic_Task_Closing_Flags);
	SetBoolAttr(Result, 'SchedRepIncludeOnline', fdSched_Rep_Include_Online);
	SetTextAttr(Result, 'SchedRepOnlineSubject', fdSched_Rep_Online_Subject);
	SetTextAttr(Result, 'SchedRepOnlineMessage', fdSched_Rep_Online_Message);
	SetTextAttr(Result, 'SchedRepOnlineCustomDocGUID', fdSched_Rep_Online_Custom_Doc_GUID);
	SetIntAttr(Result, 'SchedRepOnlineCustomDoc', fdSched_Rep_Online_Custom_Doc);
	SetIntAttr(Result, 'LastBankLinkOnlineUpdate', fdLast_BankLink_Online_Update);
	SetTextAttr(Result, 'LastAgreedToBLOSA', fdLast_Agreed_To_BLOSA);
	SetBoolAttr(Result, 'BanklinkOnlineSuspended', fdBanklink_Online_Suspended);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TPractice_Details_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	fdPractice_Name_for_Reports := GetTextAttr(Result, 'PracticeNameforReports');
	fdPractice_EMail_Address := GetTextAttr(Result, 'PracticeEMailAddress');
	fdAccounting_System_Used := GetIntAttr(Result, 'AccountingSystemUsed');
	fdCountry := GetIntAttr(Result, 'Country');
	fdLoad_Client_Files_From := GetTextAttr(Result, 'LoadClientFilesFrom');
	fdSave_Client_Files_To := GetTextAttr(Result, 'SaveClientFilesTo');
	
	PNode := Result.ChildNodes.FindNode('ShortNames');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('ShortName')
	else
		CNode := Nil;
	for I := low(fdShort_Name) to High(fdShort_Name) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdShort_Name[I] := CNode.Nodevalue
			else fdShort_Name[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdShort_Name[I] := ''
	end;

	
	PNode := Result.ChildNodes.FindNode('LongNames');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('LongName')
	else
		CNode := Nil;
	for I := low(fdLong_Name) to High(fdLong_Name) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdLong_Name[I] := CNode.Nodevalue
			else fdLong_Name[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdLong_Name[I] := ''
	end;

	
	PNode := Result.ChildNodes.FindNode('GSTClassNames');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('GSTClassName')
	else
		CNode := Nil;
	for I := low(fdGST_Class_Names) to High(fdGST_Class_Names) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdGST_Class_Names[I] := CNode.Nodevalue
			else fdGST_Class_Names[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdGST_Class_Names[I] := ''
	end;

	GetArray(Result, 'GSTClassTypes', fdGST_Class_Types);
	
	PNode := Result.ChildNodes.FindNode('GSTAccountCodes');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('GSTAccountCode')
	else
		CNode := Nil;
	for I := low(fdGST_Account_Codes) to High(fdGST_Account_Codes) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdGST_Account_Codes[I] := CNode.Nodevalue
			else fdGST_Account_Codes[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdGST_Account_Codes[I] := ''
	end;

		PNode := Result.ChildNodes.FindNode('GSTRates');
	if Assigned(PNode) then begin
		PNode := PNode.ChildNodes.FindNode('GSTRates');
	end;
	for I := low(fdGST_Rates) to High(fdGST_Rates) do begin
		if Assigned(PNode) then begin
			CNode := PNode.ChildNodes.FindNode('GSTRates');
			if Assigned(CNode) then
				CCNode := CNode.ChildNodes.FindNode('GSTRate')
			else CCNode := Nil;
		end else
			CNode := Nil;
		for J := Low(fdGST_Rates[I]) to High(fdGST_Rates[I]) do begin
			if Assigned(CCNode) then begin
				fdGST_Rates[I,J] := CCNode.Nodevalue;
				CCNode := CCNode.NextSibling;
			end else
				fdGST_Rates[I,J] := 0;
		end;
			if Assigned(PNode) then
				PNode := PNode.NextSibling;
	end;
	GetArray(Result, 'GSTAppliesFroms', fdGST_Applies_From);
	fdDate_of_Last_Entry_Received := GetIntAttr(Result, 'DateofLastEntryReceived');
	fdPrint_Reports_Up_To := GetIntAttr(Result, 'PrintReportsUpTo');
	fdUse_BankLink_Online := GetBoolAttr(Result, 'UseBankLinkOnline');
	fdPrint_Staff_Member_Header_Page := GetBoolAttr(Result, 'PrintStaffMemberHeaderPage');
	fdPrint_Client_Header_Page := GetBoolAttr(Result, 'PrintClientHeaderPage');
	fdPIN_Number := GetIntAttr(Result, 'PINNumber');
	fdBankLink_Code := GetTextAttr(Result, 'BankLinkCode');
	fdDisk_Sequence_No := GetIntAttr(Result, 'DiskSequenceNo');
	fdMagic_Number := GetIntAttr(Result, 'MagicNumber');
	fdCoding_Report_Style := GetIntAttr(Result, 'CodingReportStyle');
	fdCoding_Report_Sort_Order := GetIntAttr(Result, 'CodingReportSortOrder');
	fdCoding_Report_Entry_Selection := GetIntAttr(Result, 'CodingReportEntrySelection');
	fdCoding_Report_Blank_Lines := GetIntAttr(Result, 'CodingReportBlankLines');
	fdCoding_Report_Rule_Line := GetBoolAttr(Result, 'CodingReportRuleLine');
	fdBank_Account_LRN_Counter := GetIntAttr(Result, 'BankAccountLRNCounter');
	fdUser_LRN_Counter := GetIntAttr(Result, 'UserLRNCounter');
	fdTransaction_LRN_Counter := GetIntAttr(Result, 'TransactionLRNCounter');
	fdClient_File_LRN_Counter := GetIntAttr(Result, 'ClientFileLRNCounter');
	fdBankLink_Connect_Password := GetTextAttr(Result, 'BankLinkConnectPassword');
	fdOld_GST_Class_Codes := GetTextAttr(Result, 'OldGSTClassCodes');
	fdAccount_Code_Mask := GetTextAttr(Result, 'AccountCodeMask');
	fdFile_Version := GetIntAttr(Result, 'FileVersion');
	fdSched_Rep_Email_Subject := GetTextAttr(Result, 'SchedRepEmailSubject');
	fdOld_Sched_Rep_Email_Line1 := GetTextAttr(Result, 'OldSchedRepEmailLine1');
	fdOld_Sched_Rep_Email_Line2 := GetTextAttr(Result, 'OldSchedRepEmailLine2');
	
	PNode := Result.ChildNodes.FindNode('OLDBASSpecialAccounts');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('OLDBASSpecialAccount')
	else
		CNode := Nil;
	for I := low(fdOLD_BAS_Special_Accounts) to High(fdOLD_BAS_Special_Accounts) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdOLD_BAS_Special_Accounts[I] := CNode.Nodevalue
			else fdOLD_BAS_Special_Accounts[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdOLD_BAS_Special_Accounts[I] := ''
	end;

	
	PNode := Result.ChildNodes.FindNode('GSTClassCodes');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('GSTClassCode')
	else
		CNode := Nil;
	for I := low(fdGST_Class_Codes) to High(fdGST_Class_Codes) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdGST_Class_Codes[I] := CNode.Nodevalue
			else fdGST_Class_Codes[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdGST_Class_Codes[I] := ''
	end;

	GetArray(Result, 'BASFieldNumbers', fdBAS_Field_Number);
	GetArray(Result, 'BASFieldSources', fdBAS_Field_Source);
	
	PNode := Result.ChildNodes.FindNode('BASFieldAccountCodes');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('BASFieldAccountCode')
	else
		CNode := Nil;
	for I := low(fdBAS_Field_Account_Code) to High(fdBAS_Field_Account_Code) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				fdBAS_Field_Account_Code[I] := CNode.Nodevalue
			else fdBAS_Field_Account_Code[I] := '';
			CNode := CNode.NextSibling;
		end else
			fdBAS_Field_Account_Code[I] := ''
	end;

	GetArray(Result, 'BASFieldBalances', fdBAS_Field_Balance);
	fdSched_Rep_Include_Email := GetBoolAttr(Result, 'SchedRepIncludeEmail');
	fdSched_Rep_Email_Only := GetBoolAttr(Result, 'SchedRepEmailOnly');
	fdSched_Rep_Include_Printer := GetBoolAttr(Result, 'SchedRepIncludePrinter');
	fdSched_Rep_Include_Fax := GetBoolAttr(Result, 'SchedRepIncludeFax');
	fdSched_Rep_Send_Fax_Off_Peak := GetBoolAttr(Result, 'SchedRepSendFaxOffPeak');
	GetArray(Result, 'EnhancedSoftwareOptions', fdEnhanced_Software_Options);
	fdSched_Rep_Include_ECoding := GetBoolAttr(Result, 'SchedRepIncludeECoding');
	fdSched_Rep_Cover_Page_Name := GetTextAttr(Result, 'SchedRepCoverPageName');
	fdSched_Rep_Cover_Page_Subject := GetTextAttr(Result, 'SchedRepCoverPageSubject');
	fdSched_Rep_Cover_Page_Message := GetTextAttr(Result, 'SchedRepCoverPageMessage');
	fdSched_Rep_Email_Message := GetTextAttr(Result, 'SchedRepEmailMessage');
	fdDownload_Report_Options := GetIntAttr(Result, 'DownloadReportOptions');
	fdDownload_Report_Hide_Deleted := GetBoolAttr(Result, 'DownloadReportHideDeleted');
	fdBulk_Export_Enabled := GetBoolAttr(Result, 'BulkExportEnabled');
	fdSpare_Byte_0 := GetIntAttr(Result, 'SpareByte0');
	fdBulk_Export_Code := GetTextAttr(Result, 'BulkExportCode');
	fdSched_Rep_Include_CSV_Export := GetBoolAttr(Result, 'SchedRepIncludeCSVExport');
	fdTax_Interface_Used := GetIntAttr(Result, 'TaxInterfaceUsed');
	fdSave_Tax_Files_To := GetTextAttr(Result, 'SaveTaxFilesTo');
	fdLast_Disk_Image_Version := GetIntAttr(Result, 'LastDiskImageVersion');
	fdPractice_Web_Site := GetTextAttr(Result, 'PracticeWebSite');
	fdPractice_Phone := GetTextAttr(Result, 'PracticePhone');
	fdPractice_Logo_Filename := GetTextAttr(Result, 'PracticeLogoFilename');
	fdSched_Rep_Print_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepPrintCustomDocGUID');
	fdSched_Rep_Print_Custom_Doc := GetIntAttr(Result, 'SchedRepPrintCustomDoc');
	fdLast_ChargeFile_Date := GetIntAttr(Result, 'LastChargeFileDate');
	fdAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	fdSched_Rep_Fax_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepFaxCustomDocGUID');
	fdSched_Rep_Fax_Custom_Doc := GetIntAttr(Result, 'SchedRepFaxCustomDoc');
	fdSpare_Text_3 := GetTextAttr(Result, 'SpareText3');
	fdSched_Rep_Email_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepEmailCustomDocGUID');
	fdSched_Rep_Email_Custom_Doc := GetIntAttr(Result, 'SchedRepEmailCustomDoc');
	fdSpare_Text_5 := GetTextAttr(Result, 'SpareText5');
	fdSched_Rep_Books_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepBooksCustomDocGUID');
	fdSched_Rep_Books_Custom_Doc := GetIntAttr(Result, 'SchedRepBooksCustomDoc');
	fdSpare_Integer_3 := GetIntAttr(Result, 'SpareInteger3');
	fdSpare_Integer_4 := GetIntAttr(Result, 'SpareInteger4');
	fdSched_Rep_Notes_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepNotesCustomDocGUID');
	fdSched_Rep_Notes_Custom_Doc := GetIntAttr(Result, 'SchedRepNotesCustomDoc');
	fdSpare_Text_8 := GetTextAttr(Result, 'SpareText8');
	fdSched_Rep_WebNotes_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepWebNotesCustomDocGUID');
	fdSched_Rep_WebNotes_Custom_Doc := GetIntAttr(Result, 'SchedRepWebNotesCustomDoc');
	fdSpare_Integer_5 := GetIntAttr(Result, 'SpareInteger5');
	fdSpare_Integer_6 := GetIntAttr(Result, 'SpareInteger6');
	fdSpare_Text_10 := GetTextAttr(Result, 'SpareText10');
	fdSpare_Byte_7 := GetIntAttr(Result, 'SpareByte7');
	fdSpare_Text_11 := GetTextAttr(Result, 'SpareText11');
	fdSpare_Text_12 := GetTextAttr(Result, 'SpareText12');
	fdSpare_Byte_8 := GetIntAttr(Result, 'SpareByte8');
	fdSpare_Text_13 := GetTextAttr(Result, 'SpareText13');
	fdBankLink_Online_Config := GetTextAttr(Result, 'BankLinkOnlineConfig');
	fdSpare_Byte_9 := GetIntAttr(Result, 'SpareByte9');
	fdSpare_Integer_7 := GetIntAttr(Result, 'SpareInteger7');
	fdSpare_Integer_8 := GetIntAttr(Result, 'SpareInteger8');
	fdSched_Rep_WebNotes_Subject := GetTextAttr(Result, 'SchedRepWebNotesSubject');
	fdSpare_Byte_10 := GetIntAttr(Result, 'SpareByte10');
	fdSched_Rep_webNotes_Message := GetTextAttr(Result, 'SchedRepwebNotesMessage');
	fdSpare_Byte_11 := GetIntAttr(Result, 'SpareByte11');
	fdSched_Rep_Header_Message := GetTextAttr(Result, 'SchedRepHeaderMessage');
	fdSched_Rep_BNotes_Subject := GetTextAttr(Result, 'SchedRepBNotesSubject');
	fdSched_Rep_BNotes_Message := GetTextAttr(Result, 'SchedRepBNotesMessage');
	fdSpare_Boolean_4 := GetBoolAttr(Result, 'SpareBoolean4');
	fdTask_Tracking_Prompt_Type := GetIntAttr(Result, 'TaskTrackingPromptType');
	fdSpare_Bool_1 := GetBoolAttr(Result, 'SpareBool1');
	fdSpare_Bool_2 := GetBoolAttr(Result, 'SpareBool2');
	fdSpare_Integer_9 := GetIntAttr(Result, 'SpareInteger9');
	fdSched_Rep_Fax_Transport := GetIntAttr(Result, 'SchedRepFaxTransport');
	fdSched_Rep_Include_WebX := GetBoolAttr(Result, 'SchedRepIncludeWebX');
	fdWeb_Export_Format := GetIntAttr(Result, 'WebExportFormat');
	fdForce_Login := GetBoolAttr(Result, 'ForceLogin');
	fdLogin_Bitmap_Filename := GetTextAttr(Result, 'LoginBitmapFilename');
	fdAuto_Print_Sched_Rep_Summary := GetBoolAttr(Result, 'AutoPrintSchedRepSummary');
	fdIgnore_Quantity_In_Download := GetBoolAttr(Result, 'IgnoreQuantityInDownload');
	fdSpare_Boolean_1 := GetIntAttr(Result, 'SpareBoolean1');
	fdspare_Boolean_2 := GetIntAttr(Result, 'spareBoolean2');
	fdCopy_Dissection_Narration := GetBoolAttr(Result, 'CopyDissectionNarration');
	fdRound_Cashflow_Reports := GetBoolAttr(Result, 'RoundCashflowReports');
	fdUse_Xlon_Chart_Order := GetBoolAttr(Result, 'UseXlonChartOrder');
	fdExtract_Multiple_Accounts_PA := GetBoolAttr(Result, 'ExtractMultipleAccountsPA');
	fdExtract_Journal_Accounts_PA := GetBoolAttr(Result, 'ExtractJournalAccountsPA');
	fdExtract_Quantity := GetBoolAttr(Result, 'ExtractQuantity');
	fdReports_New_Page := GetBoolAttr(Result, 'ReportsNewPage');
	fdPrint_Merge_Report_Summary := GetIntAttr(Result, 'PrintMergeReportSummary');
	fdEmail_Merge_Report_Summary := GetIntAttr(Result, 'EmailMergeReportSummary');
	fdMaximum_Narration_Extract := GetIntAttr(Result, 'MaximumNarrationExtract');
	fdSched_Rep_Include_CheckOut := GetBoolAttr(Result, 'SchedRepIncludeCheckOut');
	fdSched_Rep_CheckOut_Subject := GetTextAttr(Result, 'SchedRepCheckOutSubject');
	fdSched_Rep_CheckOut_Message := GetTextAttr(Result, 'SchedRepCheckOutMessage');
	fdSched_Rep_Include_Business_Products := GetBoolAttr(Result, 'SchedRepIncludeBusinessProducts');
	fdSched_Rep_Business_Products_Subject := GetTextAttr(Result, 'SchedRepBusinessProductsSubject');
	fdSched_Rep_Business_Products_Message := GetTextAttr(Result, 'SchedRepBusinessProductsMessage');
	fdReplace_Narration_With_Payee := GetBoolAttr(Result, 'ReplaceNarrationWithPayee');
	fdLast_Export_Charges_Saved_To := GetTextAttr(Result, 'LastExportChargesSavedTo');
	fdManual_Account_XML := GetTextAttr(Result, 'ManualAccountXML');
	fdUpdates_Pending := GetBoolAttr(Result, 'UpdatesPending');
	fdUpdate_Server_For_Offsites := GetTextAttr(Result, 'UpdateServerForOffsites');
	fdCollect_Usage_Data := GetBoolAttr(Result, 'CollectUsageData');
	fdFixed_Charge_Increase := GetBoolAttr(Result, 'FixedChargeIncrease');
	fdPercentage_Charge_Increase := GetBoolAttr(Result, 'PercentageChargeIncrease');
	fdFixed_Dollar_Amount := GetInt64Attr(Result, 'FixedDollarAmount');
	fdDistributed_Dollar_Amount := GetInt64Attr(Result, 'DistributedDollarAmount');
	fdPercentage_Increase_Amount := GetInt64Attr(Result, 'PercentageIncreaseAmount');
	fdExtract_Quantity_Decimal_Places := GetIntAttr(Result, 'ExtractQuantityDecimalPlaces');
	fdExport_Charges_Remarks := GetTextAttr(Result, 'ExportChargesRemarks');
	fdSystem_Report_Password := GetTextAttr(Result, 'SystemReportPassword');
	fdPrint_Reports_From := GetIntAttr(Result, 'PrintReportsFrom');
	fdHighest_Date_Ever_Downloaded := GetIntAttr(Result, 'HighestDateEverDownloaded');
	fdAuto_Retrieve_New_Transactions := GetBoolAttr(Result, 'AutoRetrieveNewTransactions');
	fdCoding_Font := GetTextAttr(Result, 'CodingFont');
	fdSort_Reports_Option := GetIntAttr(Result, 'SortReportsOption');
	fdSpare_Byte_12 := GetIntAttr(Result, 'SpareByte12');
	fdGroup_LRN_Counter := GetIntAttr(Result, 'GroupLRNCounter');
	fdClient_Type_LRN_Counter := GetIntAttr(Result, 'ClientTypeLRNCounter');
		PNode := Result.ChildNodes.FindNode('TAXAppliesFroms');
	if Assigned(PNode) then begin
		PNode := PNode.ChildNodes.FindNode('TAXAppliesFroms');
	end;
	for I := low(fdTAX_Applies_From) to High(fdTAX_Applies_From) do begin
		if Assigned(PNode) then begin
			CNode := PNode.ChildNodes.FindNode('TAXAppliesFroms');
			if Assigned(CNode) then
				CCNode := CNode.ChildNodes.FindNode('TAXAppliesFrom')
			else CCNode := Nil;
		end else
			CNode := Nil;
		for J := Low(fdTAX_Applies_From[I]) to High(fdTAX_Applies_From[I]) do begin
			if Assigned(CCNode) then begin
				fdTAX_Applies_From[I,J] := CCNode.Nodevalue;
				CCNode := CCNode.NextSibling;
			end else
				fdTAX_Applies_From[I,J] := 0;
		end;
			if Assigned(PNode) then
				PNode := PNode.NextSibling;
	end;
		PNode := Result.ChildNodes.FindNode('TAXRates');
	if Assigned(PNode) then begin
		PNode := PNode.ChildNodes.FindNode('TAXRates');
	end;
	for I := low(fdTAX_Rates) to High(fdTAX_Rates) do begin
		if Assigned(PNode) then begin
			CNode := PNode.ChildNodes.FindNode('TAXRates');
			if Assigned(CNode) then
				CCNode := CNode.ChildNodes.FindNode('TAXRate')
			else CCNode := Nil;
		end else
			CNode := Nil;
		for J := Low(fdTAX_Rates[I]) to High(fdTAX_Rates[I]) do begin
			if Assigned(CCNode) then begin
				fdTAX_Rates[I,J] := CCNode.Nodevalue;
				CCNode := CCNode.NextSibling;
			end else
				fdTAX_Rates[I,J] := 0;
		end;
			if Assigned(PNode) then
				PNode := PNode.NextSibling;
	end;
	fdSuperfund_System := GetIntAttr(Result, 'SuperfundSystem');
	fdSuperfund_Code_Mask := GetTextAttr(Result, 'SuperfundCodeMask');
	fdLoad_Client_Super_Files_From := GetTextAttr(Result, 'LoadClientSuperFilesFrom');
	fdSave_Client_Super_Files_To := GetTextAttr(Result, 'SaveClientSuperFilesTo');
	fdSort_Reports_By := GetIntAttr(Result, 'SortReportsBy');
	fdSet_Fixed_Dollar_Amount := GetInt64Attr(Result, 'SetFixedDollarAmount');
	fdPrint_Group_Header_Page := GetBoolAttr(Result, 'PrintGroupHeaderPage');
	fdPrint_Client_Type_Header_Page := GetBoolAttr(Result, 'PrintClientTypeHeaderPage');
	fdPractice_Management_System := GetIntAttr(Result, 'PracticeManagementSystem');
	GetArray(Result, 'AutomaticTaskCreationFlags', fdAutomatic_Task_Creation_Flags);
	GetArray(Result, 'AutomaticTaskReminderDelays', fdAutomatic_Task_Reminder_Delay);
	GetArray(Result, 'AutomaticTaskClosingFlags', fdAutomatic_Task_Closing_Flags);
	fdSched_Rep_Include_Online := GetBoolAttr(Result, 'SchedRepIncludeOnline');
	fdSched_Rep_Online_Subject := GetTextAttr(Result, 'SchedRepOnlineSubject');
	fdSched_Rep_Online_Message := GetTextAttr(Result, 'SchedRepOnlineMessage');
	fdSched_Rep_Online_Custom_Doc_GUID := GetTextAttr(Result, 'SchedRepOnlineCustomDocGUID');
	fdSched_Rep_Online_Custom_Doc := GetIntAttr(Result, 'SchedRepOnlineCustomDoc');
	fdLast_BankLink_Online_Update := GetIntAttr(Result, 'LastBankLinkOnlineUpdate');
	fdLast_Agreed_To_BLOSA := GetTextAttr(Result, 'LastAgreedToBLOSA');
	fdBanklink_Online_Suspended := GetBoolAttr(Result, 'BanklinkOnlineSuspended');
	except
		on E: Exception do ReRaise (E, 'Reading TPractice_Details_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TSystem_Disk_Log_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYSystemDiskLog';
end;


function TSystem_Disk_Log_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'DiskID', dlDisk_ID);
	SetIntAttr(Result, 'DateDownloaded', dlDate_Downloaded);
	SetIntAttr(Result, 'NoofAccounts', dlNo_of_Accounts);
	SetIntAttr(Result, 'NoofEntries', dlNo_of_Entries);
	SetBoolAttr(Result, 'WasInLastDownload', dlWas_In_Last_Download);
	SetIntAttr(Result, 'AuditRecordID', dlAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TSystem_Disk_Log_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	dlDisk_ID := GetTextAttr(Result, 'DiskID');
	dlDate_Downloaded := GetIntAttr(Result, 'DateDownloaded');
	dlNo_of_Accounts := GetIntAttr(Result, 'NoofAccounts');
	dlNo_of_Entries := GetIntAttr(Result, 'NoofEntries');
	dlWas_In_Last_Download := GetBoolAttr(Result, 'WasInLastDownload');
	dlAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TSystem_Disk_Log_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TUser_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYUser';
end;


function TUser_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'Code', usCode);
	SetTextAttr(Result, 'Name', usName);
	SetTextAttr(Result, 'RedundantPassword', usRedundant_Password);
	SetTextAttr(Result, 'EMailAddress', usEMail_Address);
	SetBoolAttr(Result, 'SystemAccess', usSystem_Access);
	SetIntAttr(Result, 'DialogColour', usDialog_Colour);
	SetBoolAttr(Result, 'LoggedIn', usLogged_In);
	SetBoolAttr(Result, 'ReverseMouseButtons', usReverse_Mouse_Buttons);
	SetBoolAttr(Result, 'MASTERAccess', usMASTER_Access);
	SetIntAttr(Result, 'LRN', usLRN);
	SetTextAttr(Result, 'SpareString', usSpare_String);
	SetTextAttr(Result, 'WorkstationLoggedInAt', usWorkstation_Logged_In_At);
	SetBoolAttr(Result, 'IsRemoteUser', usIs_Remote_User);
	SetTextAttr(Result, 'DirectDial', usDirect_Dial);
	SetBoolAttr(Result, 'ShowCMonopen', usShow_CM_on_open);
	SetBoolAttr(Result, 'ShowPrinterChoice', usShow_Printer_Choice);
	SetTextAttr(Result, 'EULAVersion', usEULA_Version);
	SetBoolAttr(Result, 'SpareBoolean', usSpare_Boolean);
	SetIntAttr(Result, 'LoginCount', usLogin_Count);
	SetIntAttr(Result, 'ResetCount', usReset_Count);
	SetIntAttr(Result, 'SuppressHF', usSuppress_HF);
	SetBoolAttr(Result, 'ShowPracticeLogo', usShow_Practice_Logo);
	SetIntAttr(Result, 'AuditRecordID', usAudit_Record_ID);
	SetBoolAttr(Result, 'AllowBanklinkOnline', usAllow_Banklink_Online);
	SetTextAttr(Result, 'Password', usPassword);
	SetBoolAttr(Result, 'UsePracticePasswordOnline', usUse_Practice_Password_Online);
	SetBoolAttr(Result, 'UsingMixedCasePassword', usUsing_Mixed_Case_Password);
	SetBoolAttr(Result, 'UsingSecureAuthentication', usUsing_Secure_Authentication);
	SetArray(Result, 'UserDataBlocks', usUser_Data_Block);
	SetTextAttr(Result, 'Salt', usSalt);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TUser_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	usCode := GetTextAttr(Result, 'Code');
	usName := GetTextAttr(Result, 'Name');
	usRedundant_Password := GetTextAttr(Result, 'RedundantPassword');
	usEMail_Address := GetTextAttr(Result, 'EMailAddress');
	usSystem_Access := GetBoolAttr(Result, 'SystemAccess');
	usDialog_Colour := GetIntAttr(Result, 'DialogColour');
	usLogged_In := GetBoolAttr(Result, 'LoggedIn');
	usReverse_Mouse_Buttons := GetBoolAttr(Result, 'ReverseMouseButtons');
	usMASTER_Access := GetBoolAttr(Result, 'MASTERAccess');
	usLRN := GetIntAttr(Result, 'LRN');
	usSpare_String := GetTextAttr(Result, 'SpareString');
	usWorkstation_Logged_In_At := GetTextAttr(Result, 'WorkstationLoggedInAt');
	usIs_Remote_User := GetBoolAttr(Result, 'IsRemoteUser');
	usDirect_Dial := GetTextAttr(Result, 'DirectDial');
	usShow_CM_on_open := GetBoolAttr(Result, 'ShowCMonopen');
	usShow_Printer_Choice := GetBoolAttr(Result, 'ShowPrinterChoice');
	usEULA_Version := GetTextAttr(Result, 'EULAVersion');
	usSpare_Boolean := GetBoolAttr(Result, 'SpareBoolean');
	usLogin_Count := GetIntAttr(Result, 'LoginCount');
	usReset_Count := GetIntAttr(Result, 'ResetCount');
	usSuppress_HF := GetIntAttr(Result, 'SuppressHF');
	usShow_Practice_Logo := GetBoolAttr(Result, 'ShowPracticeLogo');
	usAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	usAllow_Banklink_Online := GetBoolAttr(Result, 'AllowBanklinkOnline');
	usPassword := GetTextAttr(Result, 'Password');
	usUse_Practice_Password_Online := GetBoolAttr(Result, 'UsePracticePasswordOnline');
	usUsing_Mixed_Case_Password := GetBoolAttr(Result, 'UsingMixedCasePassword');
	usUsing_Secure_Authentication := GetBoolAttr(Result, 'UsingSecureAuthentication');
	GetArray(Result, 'UserDataBlocks', usUser_Data_Block);
	usSalt := GetTextAttr(Result, 'Salt');
	except
		on E: Exception do ReRaise (E, 'Reading TUser_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TSystem_Bank_Account_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYSystemBankAccount';
end;


function TSystem_Bank_Account_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'AccountNumber', sbAccount_Number);
	SetTextAttr(Result, 'AccountName', sbAccount_Name);
	SetTextAttr(Result, 'AccountPassword', sbAccount_Password);
	SetIntAttr(Result, 'LRN', sbLRN);
	SetIntAttr(Result, 'Client', sbClient);
	SetInt64Attr(Result, 'CurrentBalance', sbCurrent_Balance);
	SetIntAttr(Result, 'LastTransactionLRN', sbLast_Transaction_LRN);
	SetBoolAttr(Result, 'NewThisMonth', sbNew_This_Month);
	SetIntAttr(Result, 'NoofEntriesThisMonth', sbNo_of_Entries_This_Month);
	SetIntAttr(Result, 'FromDateThisMonth', sbFrom_Date_This_Month);
	SetIntAttr(Result, 'ToDateThisMonth', sbTo_Date_This_Month);
	SetTextAttr(Result, 'CostCode', sbCost_Code);
	SetInt64Attr(Result, 'ChargesThisMonth', sbCharges_This_Month);
	SetInt64Attr(Result, 'OpeningBalancefromDisk', sbOpening_Balance_from_Disk);
	SetInt64Attr(Result, 'ClosingBalancefromDisk', sbClosing_Balance_from_Disk);
	SetBoolAttr(Result, 'AttachRequired', sbAttach_Required);
	SetBoolAttr(Result, 'WasOnLatestDisk', sbWas_On_Latest_Disk);
	SetIntAttr(Result, 'LastEntryDate', sbLast_Entry_Date);
	SetIntAttr(Result, 'DateOfLastEntryPrinted', sbDate_Of_Last_Entry_Printed);
	SetBoolAttr(Result, 'MarkAsDeleted', sbMark_As_Deleted);
	SetTextAttr(Result, 'FileCode', sbFile_Code);
	SetTextAttr(Result, 'ClientID', sbClient_ID);
	SetTextAttr(Result, 'MatterID', sbMatter_ID);
	SetTextAttr(Result, 'AssignmentID', sbAssignment_ID);
	SetTextAttr(Result, 'DisbursementID', sbDisbursement_ID);
	SetIntAttr(Result, 'AccountType', sbAccount_Type);
	SetTextAttr(Result, 'JobCode', sbJob_Code);
	SetTextAttr(Result, 'ActivityCode', sbActivity_Code);
	SetIntAttr(Result, 'Unused', sbUnused);
	SetIntAttr(Result, 'FirstAvailableDate', sbFirst_Available_Date);
	SetBoolAttr(Result, 'NoChargeAccount', sbNo_Charge_Account);
	SetTextAttr(Result, 'CurrencyCode', sbCurrency_Code);
	SetTextAttr(Result, 'Institution', sbInstitution);
	SetBoolAttr(Result, 'InActive', sbInActive);
	SetTextAttr(Result, 'BankLinkCode', sbBankLink_Code);
	SetIntAttr(Result, 'Frequency', sbFrequency);
	SetIntAttr(Result, 'FrequencyChangePending', sbFrequency_Change_Pending);
	SetIntAttr(Result, 'AuditRecordID', sbAudit_Record_ID);
	SetIntAttr(Result, 'CoreAccountID', sbCore_Account_ID);
	SetTextAttr(Result, 'SecureOnlineCode', sbSecure_Online_Code);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TSystem_Bank_Account_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	sbAccount_Number := GetTextAttr(Result, 'AccountNumber');
	sbAccount_Name := GetTextAttr(Result, 'AccountName');
	sbAccount_Password := GetTextAttr(Result, 'AccountPassword');
	sbLRN := GetIntAttr(Result, 'LRN');
	sbClient := GetIntAttr(Result, 'Client');
	sbCurrent_Balance := GetInt64Attr(Result, 'CurrentBalance');
	sbLast_Transaction_LRN := GetIntAttr(Result, 'LastTransactionLRN');
	sbNew_This_Month := GetBoolAttr(Result, 'NewThisMonth');
	sbNo_of_Entries_This_Month := GetIntAttr(Result, 'NoofEntriesThisMonth');
	sbFrom_Date_This_Month := GetIntAttr(Result, 'FromDateThisMonth');
	sbTo_Date_This_Month := GetIntAttr(Result, 'ToDateThisMonth');
	sbCost_Code := GetTextAttr(Result, 'CostCode');
	sbCharges_This_Month := GetInt64Attr(Result, 'ChargesThisMonth');
	sbOpening_Balance_from_Disk := GetInt64Attr(Result, 'OpeningBalancefromDisk');
	sbClosing_Balance_from_Disk := GetInt64Attr(Result, 'ClosingBalancefromDisk');
	sbAttach_Required := GetBoolAttr(Result, 'AttachRequired');
	sbWas_On_Latest_Disk := GetBoolAttr(Result, 'WasOnLatestDisk');
	sbLast_Entry_Date := GetIntAttr(Result, 'LastEntryDate');
	sbDate_Of_Last_Entry_Printed := GetIntAttr(Result, 'DateOfLastEntryPrinted');
	sbMark_As_Deleted := GetBoolAttr(Result, 'MarkAsDeleted');
	sbFile_Code := GetTextAttr(Result, 'FileCode');
	sbClient_ID := GetTextAttr(Result, 'ClientID');
	sbMatter_ID := GetTextAttr(Result, 'MatterID');
	sbAssignment_ID := GetTextAttr(Result, 'AssignmentID');
	sbDisbursement_ID := GetTextAttr(Result, 'DisbursementID');
	sbAccount_Type := GetIntAttr(Result, 'AccountType');
	sbJob_Code := GetTextAttr(Result, 'JobCode');
	sbActivity_Code := GetTextAttr(Result, 'ActivityCode');
	sbUnused := GetIntAttr(Result, 'Unused');
	sbFirst_Available_Date := GetIntAttr(Result, 'FirstAvailableDate');
	sbNo_Charge_Account := GetBoolAttr(Result, 'NoChargeAccount');
	sbCurrency_Code := GetTextAttr(Result, 'CurrencyCode');
	sbInstitution := GetTextAttr(Result, 'Institution');
	sbInActive := GetBoolAttr(Result, 'InActive');
	sbBankLink_Code := GetTextAttr(Result, 'BankLinkCode');
	sbFrequency := GetIntAttr(Result, 'Frequency');
	sbFrequency_Change_Pending := GetIntAttr(Result, 'FrequencyChangePending');
	sbAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	sbCore_Account_ID := GetIntAttr(Result, 'CoreAccountID');
	sbSecure_Online_Code := GetTextAttr(Result, 'SecureOnlineCode');
	except
		on E: Exception do ReRaise (E, 'Reading TSystem_Bank_Account_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TClient_File_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYClientFile';
end;


function TClient_File_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'FileCode', cfFile_Code);
	SetTextAttr(Result, 'FileName', cfFile_Name);
	SetIntAttr(Result, 'FileType', cfFile_Type);
	SetIntAttr(Result, 'FileStatus', cfFile_Status);
	SetTextAttr(Result, 'FilePassword', cfFile_Password);
	SetIntAttr(Result, 'DateLastAccessed', cfDate_Last_Accessed);
	SetIntAttr(Result, 'FileSaveCount', cfFile_Save_Count);
	SetIntAttr(Result, 'UserResponsible', cfUser_Responsible);
	SetIntAttr(Result, 'CurrentUser', cfCurrent_User);
	SetIntAttr(Result, 'LRN', cfLRN);
	SetIntAttr(Result, 'ReportStartDate', cfReport_Start_Date);
	SetIntAttr(Result, 'ReportingPeriod', cfReporting_Period);
	SetBoolAttr(Result, 'ForeignFile', cfForeign_File);
	SetIntAttr(Result, 'UnusedDateField', cfUnused_Date_Field);
	SetBoolAttr(Result, 'ReportsDue', cfReports_Due);
	SetIntAttr(Result, 'ContactDetailsToShow', cfContact_Details_To_Show);
	SetIntAttr(Result, 'FinancialYearStarts', cfFinancial_Year_Starts);
	SetIntAttr(Result, 'SchdRepMethod', cfSchd_Rep_Method);
	SetBoolAttr(Result, 'SpareBoolean', cfSpareBoolean);
	SetIntAttr(Result, 'PendingToDoCount', cfPending_ToDo_Count);
	SetTextAttr(Result, 'NextToDoDesc', cfNext_ToDo_Desc);
	SetIntAttr(Result, 'NextToDoRemDate', cfNext_ToDo_Rem_Date);
	SetBoolAttr(Result, 'HasClientNotes', cfHas_Client_Notes);
	SetIntAttr(Result, 'OverdueToDoCount', cfOverdue_ToDo_Count);
	SetIntAttr(Result, 'SchedRepReportsToSend', cfSched_Rep_Reports_To_Send);
	SetIntAttr(Result, 'ContactDetailsEditDate', cfContact_Details_Edit_Date);
	SetIntAttr(Result, 'ContactDetailsEditTime', cfContact_Details_Edit_Time);
	SetTextAttr(Result, 'BankAccounts', cfBank_Accounts);
	SetIntAttr(Result, 'DateOfLastEntryPrinted', cfDate_Of_Last_Entry_Printed);
	SetIntAttr(Result, 'LastPrintReportsUpTo', cfLast_Print_Reports_Up_To);
	SetIntAttr(Result, 'ClientType', cfClient_Type);
	SetArray(Result, 'Codeds', cfCoded);
	SetArray(Result, 'Finalizeds', cfFinalized);
	SetArray(Result, 'Transferreds', cfTransferred);
	SetIntAttr(Result, 'LastProcessingStatusDate', cfLast_Processing_Status_Date);
	SetIntAttr(Result, 'SchdRepMethodFilter', cfSchd_Rep_Method_Filter);
	SetBoolAttr(Result, 'Archived', cfArchived);
	SetIntAttr(Result, 'PayeeCount', cfPayee_Count);
	SetIntAttr(Result, 'BankAccountCount', cfBank_Account_Count);
	SetIntAttr(Result, 'ManualAccountCount', cfManual_Account_Count);
	SetIntAttr(Result, 'MemCount', cfMem_Count);
	SetTextAttr(Result, 'AccountingSystem', cfAccounting_System);
	SetArray(Result, 'Downloadeds', cfDownloaded);
	SetIntAttr(Result, 'GroupLRN', cfGroup_LRN);
	SetIntAttr(Result, 'ClientTypeLRN', cfClient_Type_LRN);
	SetIntAttr(Result, 'JobCount', cfJob_Count);
	SetIntAttr(Result, 'DivisionCount', cfDivision_Count);
	SetIntAttr(Result, 'GSTPeriod', cfGST_Period);
	SetIntAttr(Result, 'GSTStartMonth', cfGST_Start_Month);
	SetTextAttr(Result, 'BulkExtractCode', cfBulk_Extract_Code);
	SetArray(Result, 'WebNotesAvailables', cfWebNotesAvailable);
	SetIntAttr(Result, 'WebNotesEmailNotifications', cfWebNotes_Email_Notifications);
	PNode := Result.AddChild('ISOCodes');
	M :=  Low(cfISO_Codes);
	for I := Low(cfISO_Codes) to High(cfISO_Codes) do
		if  cfISO_Codes[I] > '' then
			M := I;
	for I := Low(cfISO_Codes) to M do begin
		CNode := PNode.AddChild('ISOCode');
		CNode.NodeValue := cfISO_Codes[I];
	end;
	SetIntAttr(Result, 'AuditRecordID', cfAudit_Record_ID);
	SetIntAttr(Result, 'FileTransferMethod', cfFile_Transfer_Method);
	SetTextAttr(Result, 'ClientFileGUID', cfClient_File_GUID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TClient_File_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	cfFile_Code := GetTextAttr(Result, 'FileCode');
	cfFile_Name := GetTextAttr(Result, 'FileName');
	cfFile_Type := GetIntAttr(Result, 'FileType');
	cfFile_Status := GetIntAttr(Result, 'FileStatus');
	cfFile_Password := GetTextAttr(Result, 'FilePassword');
	cfDate_Last_Accessed := GetIntAttr(Result, 'DateLastAccessed');
	cfFile_Save_Count := GetIntAttr(Result, 'FileSaveCount');
	cfUser_Responsible := GetIntAttr(Result, 'UserResponsible');
	cfCurrent_User := GetIntAttr(Result, 'CurrentUser');
	cfLRN := GetIntAttr(Result, 'LRN');
	cfReport_Start_Date := GetIntAttr(Result, 'ReportStartDate');
	cfReporting_Period := GetIntAttr(Result, 'ReportingPeriod');
	cfForeign_File := GetBoolAttr(Result, 'ForeignFile');
	cfUnused_Date_Field := GetIntAttr(Result, 'UnusedDateField');
	cfReports_Due := GetBoolAttr(Result, 'ReportsDue');
	cfContact_Details_To_Show := GetIntAttr(Result, 'ContactDetailsToShow');
	cfFinancial_Year_Starts := GetIntAttr(Result, 'FinancialYearStarts');
	cfSchd_Rep_Method := GetIntAttr(Result, 'SchdRepMethod');
	cfSpareBoolean := GetBoolAttr(Result, 'SpareBoolean');
	cfPending_ToDo_Count := GetIntAttr(Result, 'PendingToDoCount');
	cfNext_ToDo_Desc := GetTextAttr(Result, 'NextToDoDesc');
	cfNext_ToDo_Rem_Date := GetIntAttr(Result, 'NextToDoRemDate');
	cfHas_Client_Notes := GetBoolAttr(Result, 'HasClientNotes');
	cfOverdue_ToDo_Count := GetIntAttr(Result, 'OverdueToDoCount');
	cfSched_Rep_Reports_To_Send := GetIntAttr(Result, 'SchedRepReportsToSend');
	cfContact_Details_Edit_Date := GetIntAttr(Result, 'ContactDetailsEditDate');
	cfContact_Details_Edit_Time := GetIntAttr(Result, 'ContactDetailsEditTime');
	cfBank_Accounts := GetTextAttr(Result, 'BankAccounts');
	cfDate_Of_Last_Entry_Printed := GetIntAttr(Result, 'DateOfLastEntryPrinted');
	cfLast_Print_Reports_Up_To := GetIntAttr(Result, 'LastPrintReportsUpTo');
	cfClient_Type := GetIntAttr(Result, 'ClientType');
	GetArray(Result, 'Codeds', cfCoded);
	GetArray(Result, 'Finalizeds', cfFinalized);
	GetArray(Result, 'Transferreds', cfTransferred);
	cfLast_Processing_Status_Date := GetIntAttr(Result, 'LastProcessingStatusDate');
	cfSchd_Rep_Method_Filter := GetIntAttr(Result, 'SchdRepMethodFilter');
	cfArchived := GetBoolAttr(Result, 'Archived');
	cfPayee_Count := GetIntAttr(Result, 'PayeeCount');
	cfBank_Account_Count := GetIntAttr(Result, 'BankAccountCount');
	cfManual_Account_Count := GetIntAttr(Result, 'ManualAccountCount');
	cfMem_Count := GetIntAttr(Result, 'MemCount');
	cfAccounting_System := GetTextAttr(Result, 'AccountingSystem');
	GetArray(Result, 'Downloadeds', cfDownloaded);
	cfGroup_LRN := GetIntAttr(Result, 'GroupLRN');
	cfClient_Type_LRN := GetIntAttr(Result, 'ClientTypeLRN');
	cfJob_Count := GetIntAttr(Result, 'JobCount');
	cfDivision_Count := GetIntAttr(Result, 'DivisionCount');
	cfGST_Period := GetIntAttr(Result, 'GSTPeriod');
	cfGST_Start_Month := GetIntAttr(Result, 'GSTStartMonth');
	cfBulk_Extract_Code := GetTextAttr(Result, 'BulkExtractCode');
	GetArray(Result, 'WebNotesAvailables', cfWebNotesAvailable);
	cfWebNotes_Email_Notifications := GetIntAttr(Result, 'WebNotesEmailNotifications');
	
	PNode := Result.ChildNodes.FindNode('ISOCodes');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('ISOCode')
	else
		CNode := Nil;
	for I := low(cfISO_Codes) to High(cfISO_Codes) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				cfISO_Codes[I] := CNode.Nodevalue
			else cfISO_Codes[I] := '';
			CNode := CNode.NextSibling;
		end else
			cfISO_Codes[I] := ''
	end;

	cfAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	cfFile_Transfer_Method := GetIntAttr(Result, 'FileTransferMethod');
	cfClient_File_GUID := GetTextAttr(Result, 'ClientFileGUID');
	except
		on E: Exception do ReRaise (E, 'Reading TClient_File_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TFile_Access_Mapping_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYFileAccessMapping';
end;


function TFile_Access_Mapping_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'UserLRN', acUser_LRN);
	SetIntAttr(Result, 'ClientFileLRN', acClient_File_LRN);
	SetIntAttr(Result, 'AuditRecordID', acAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TFile_Access_Mapping_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	acUser_LRN := GetIntAttr(Result, 'UserLRN');
	acClient_File_LRN := GetIntAttr(Result, 'ClientFileLRN');
	acAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TFile_Access_Mapping_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TClient_Account_Map_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYClientAccountMap';
end;


function TClient_Account_Map_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'ClientLRN', amClient_LRN);
	SetIntAttr(Result, 'AccountLRN', amAccount_LRN);
	SetIntAttr(Result, 'LastDatePrinted', amLast_Date_Printed);
	SetIntAttr(Result, 'TempLastDatePrinted', amTemp_Last_Date_Printed);
	SetIntAttr(Result, 'EarliestDownloadDate', amEarliest_Download_Date);
	SetIntAttr(Result, 'AuditRecordID', amAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TClient_Account_Map_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	amClient_LRN := GetIntAttr(Result, 'ClientLRN');
	amAccount_LRN := GetIntAttr(Result, 'AccountLRN');
	amLast_Date_Printed := GetIntAttr(Result, 'LastDatePrinted');
	amTemp_Last_Date_Printed := GetIntAttr(Result, 'TempLastDatePrinted');
	amEarliest_Download_Date := GetIntAttr(Result, 'EarliestDownloadDate');
	amAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TClient_Account_Map_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TGroup_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYGroup';
end;


function TGroup_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'LRN', grLRN);
	SetTextAttr(Result, 'Name', grName);
	SetIntAttr(Result, 'AuditRecordID', grAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TGroup_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	grLRN := GetIntAttr(Result, 'LRN');
	grName := GetTextAttr(Result, 'Name');
	grAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TGroup_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TClient_Type_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYClientType';
end;


function TClient_Type_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'LRN', ctLRN);
	SetTextAttr(Result, 'Name', ctName);
	SetIntAttr(Result, 'AuditRecordID', ctAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TClient_Type_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	ctLRN := GetIntAttr(Result, 'LRN');
	ctName := GetTextAttr(Result, 'Name');
	ctAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TClient_Type_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TAudit_Trail_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYAuditTrail';
end;


function TAudit_Trail_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'AuditID', atAudit_ID);
	SetIntAttr(Result, 'TransactionType', atTransaction_Type);
	SetIntAttr(Result, 'AuditAction', atAudit_Action);
	SetTextAttr(Result, 'UserCode', atUser_Code);
	SetIntAttr(Result, 'RecordID', atRecord_ID);
	SetIntAttr(Result, 'ParentID', atParent_ID);
	SetArray(Result, 'ChangedFields', atChanged_Fields);
	SetTextAttr(Result, 'OtherInfo', atOther_Info);
	SetIntAttr(Result, 'AuditRecordType', atAudit_Record_Type);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TAudit_Trail_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	atAudit_ID := GetIntAttr(Result, 'AuditID');
	atTransaction_Type := GetIntAttr(Result, 'TransactionType');
	atAudit_Action := GetIntAttr(Result, 'AuditAction');
	atUser_Code := GetTextAttr(Result, 'UserCode');
	atRecord_ID := GetIntAttr(Result, 'RecordID');
	atParent_ID := GetIntAttr(Result, 'ParentID');
	GetArray(Result, 'ChangedFields', atChanged_Fields);
	atOther_Info := GetTextAttr(Result, 'OtherInfo');
	atAudit_Record_Type := GetIntAttr(Result, 'AuditRecordType');
	except
		on E: Exception do ReRaise (E, 'Reading TAudit_Trail_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TProvisional_Entries_Log_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYProvisionalEntriesLog';
end;


function TProvisional_Entries_Log_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'UserCode', peUser_Code);
	SetIntAttr(Result, 'FirstLRN', peFirst_LRN);
	SetIntAttr(Result, 'LastLRN', peLast_LRN);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TProvisional_Entries_Log_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	peUser_Code := GetTextAttr(Result, 'UserCode');
	peFirst_LRN := GetIntAttr(Result, 'FirstLRN');
	peLast_LRN := GetIntAttr(Result, 'LastLRN');
	except
		on E: Exception do ReRaise (E, 'Reading TProvisional_Entries_Log_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TSystem_Memorisation_List_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYSystemMemorisationList';
end;


function TSystem_Memorisation_List_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'AuditRecordID', smAudit_Record_ID);
	SetTextAttr(Result, 'BankPrefix', smBank_Prefix);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TSystem_Memorisation_List_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	smAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	smBank_Prefix := GetTextAttr(Result, 'BankPrefix');
	except
		on E: Exception do ReRaise (E, 'Reading TSystem_Memorisation_List_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TTPR_Supplier_Detail_RecHelper.GetXMLNodeName: string;
begin
	result := 'SYTPRSupplierDetail';
end;


function TTPR_Supplier_Detail_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'ABN', srABN);
	SetTextAttr(Result, 'ContactName', srContactName);
	SetTextAttr(Result, 'ContactPhone', srContactPhone);
	SetTextAttr(Result, 'StreetAddress1', srStreetAddress1);
	SetTextAttr(Result, 'StreetAddress2', srStreetAddress2);
	SetTextAttr(Result, 'Suburb', srSuburb);
	SetIntAttr(Result, 'StateId', srStateId);
	SetTextAttr(Result, 'Country', srCountry);
	SetTextAttr(Result, 'PostCode', srPostCode);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TTPR_Supplier_Detail_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	srABN := GetTextAttr(Result, 'ABN');
	srContactName := GetTextAttr(Result, 'ContactName');
	srContactPhone := GetTextAttr(Result, 'ContactPhone');
	srStreetAddress1 := GetTextAttr(Result, 'StreetAddress1');
	srStreetAddress2 := GetTextAttr(Result, 'StreetAddress2');
	srSuburb := GetTextAttr(Result, 'Suburb');
	srStateId := GetIntAttr(Result, 'StateId');
	srCountry := GetTextAttr(Result, 'Country');
	srPostCode := GetTextAttr(Result, 'PostCode');
	except
		on E: Exception do ReRaise (E, 'Reading TTPR_Supplier_Detail_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


end.

// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
using System;
using BankLink.Practice.Common.Entities;
using System.Xml.Serialization;


namespace BankLink.Practice.BooksIO
{
	/// <summary>
	/// BK - MemorisedTransaction class
	/// </summary>
	public partial class BKMemorisedTransaction 
	{


		/// <summary>
		/// SequenceNo property
		/// </summary>
		[XmlAttribute("SequenceNo", DataType = "int")]
		public Int32 SequenceNo { get; set; }



		/// <summary>
		/// Type property
		/// </summary>
		[XmlAttribute("Type", DataType = "unsignedByte")]
		public byte Type { get; set; }



		/// <summary>
		/// Amount property
		/// </summary>
		[XmlAttribute("Amount", DataType = "long")]
		public Int64 Amount { get; set; }



		/// <summary>
		/// Reference property
		/// </summary>
		[XmlAttribute("Reference", DataType = "string")]
		public String Reference { get; set; }



		/// <summary>
		/// Particulars property
		/// </summary>
		[XmlAttribute("Particulars", DataType = "string")]
		public String Particulars { get; set; }



		/// <summary>
		/// Analysis property
		/// </summary>
		[XmlAttribute("Analysis", DataType = "string")]
		public String Analysis { get; set; }



		/// <summary>
		/// OtherParty property
		/// </summary>
		[XmlAttribute("OtherParty", DataType = "string")]
		public String OtherParty { get; set; }



		/// <summary>
		/// StatementDetails property
		/// </summary>
		[XmlAttribute("StatementDetails", DataType = "string")]
		public String StatementDetails { get; set; }



		/// <summary>
		/// MatchonAmount property
		/// </summary>
		[XmlAttribute("MatchonAmount", DataType = "unsignedByte")]
		public byte MatchonAmount { get; set; }



		/// <summary>
		/// MatchonRefce property
		/// </summary>
		[XmlAttribute("MatchonRefce", DataType = "boolean")]
		public bool MatchonRefce { get; set; }



		/// <summary>
		/// MatchonParticulars property
		/// </summary>
		[XmlAttribute("MatchonParticulars", DataType = "boolean")]
		public bool MatchonParticulars { get; set; }



		/// <summary>
		/// MatchonAnalysis property
		/// </summary>
		[XmlAttribute("MatchonAnalysis", DataType = "boolean")]
		public bool MatchonAnalysis { get; set; }



		/// <summary>
		/// MatchonOtherParty property
		/// </summary>
		[XmlAttribute("MatchonOtherParty", DataType = "boolean")]
		public bool MatchonOtherParty { get; set; }



		/// <summary>
		/// MatchOnStatementDetails property
		/// </summary>
		[XmlAttribute("MatchOnStatementDetails", DataType = "boolean")]
		public bool MatchOnStatementDetails { get; set; }



		/// <summary>
		/// Account property
		/// </summary>
		[XmlArray("Accounts"),XmlArrayItem("Account", DataType = "string")]
		public String[] Account { get; set; }


		/// <summary>
		/// Percentage property
		/// </summary>
		[XmlArray("Percentages"),XmlArrayItem("Percentage", DataType = "long")]
		public Int64[] Percentage { get; set; }


		/// <summary>
		/// GSTClass property
		/// </summary>
		[XmlArray("GSTClass"),XmlArrayItem("GSTClas", DataType = "unsignedByte")]
		public byte[] GSTClass { get; set; }


		/// <summary>
		/// PayeeNumber property
		/// </summary>
		[XmlAttribute("PayeeNumber", DataType = "int")]
		public Int32 PayeeNumber { get; set; }



		/// <summary>
		/// FromMasterList property
		/// </summary>
		[XmlAttribute("FromMasterList", DataType = "boolean")]
		public bool FromMasterList { get; set; }



		/// <summary>
		/// GSTHasBeenEdited property
		/// </summary>
		[XmlArray("GSTHasBeenEditeds"),XmlArrayItem("GSTHasBeenEdited", DataType = "boolean")]
		public bool[] GSTHasBeenEdited { get; set; }


		/// <summary>
		/// MatchonNotes property
		/// </summary>
		[XmlAttribute("MatchonNotes", DataType = "boolean")]
		public bool MatchonNotes { get; set; }



		/// <summary>
		/// Notes property
		/// </summary>
		[XmlAttribute("Notes", DataType = "string")]
		public String Notes { get; set; }



		/// <summary>
		/// GLNarration property
		/// </summary>
		[XmlArray("GLNarrations"),XmlArrayItem("GLNarration", DataType = "string")]
		public String[] GLNarration { get; set; }


		/// <summary>
		/// LineType property
		/// </summary>
		[XmlArray("LineTypes"),XmlArrayItem("LineType", DataType = "unsignedByte")]
		public byte[] LineType { get; set; }


		/// <summary>
		/// AuditRecordID property
		/// </summary>
		[XmlAttribute("AuditRecordID", DataType = "int")]
		public Int32 AuditRecordID { get; set; }


		/// <summary>
		/// Class Begin Token
		/// </summary>
		public const byte BeginToken = 220;
		/// <summary>
		/// Class End Token
		/// </summary>
		public const byte EndToken = 221;
		/// <summary>
		/// Write to BKStream
		/// </summary>
		public void WriteBKStream(BankLinkTokenStreamWriter s)
		{
			s.WriteToken(220);
			s.WriteInt32Value(222, SequenceNo);
			s.WriteByteValue(223, Type);
			s.WriteMoneyValue(224, Amount);
			s.WriteShortStringValue(225, Reference);
			s.WriteShortStringValue(226, Particulars);
			s.WriteShortStringValue(227, Analysis);
			s.WriteShortStringValue(228, OtherParty);
			s.WriteShortStringValue(229, StatementDetails);
			s.WriteByteValue(230, MatchonAmount);
			s.WriteBooleanValue(231, MatchonRefce);
			s.WriteBooleanValue(232, MatchonParticulars);
			s.WriteBooleanValue(233, MatchonAnalysis);
			s.WriteBooleanValue(234, MatchonOtherParty);
			s.WriteBooleanValue(235, MatchOnStatementDetails);
			s.WriteShortStringArray(236, Account, false);
			s.WriteMoneyArray(237, Percentage, false);
			s.WriteByteArray(238, GSTClass, false);
			s.WriteInt32Value(239, PayeeNumber);
			s.WriteBooleanValue(240, FromMasterList);
			s.WriteBooleanArray(241, GSTHasBeenEdited, false);
			s.WriteBooleanValue(242, MatchonNotes);
			s.WriteShortStringValue(243, Notes);
			s.WriteShortStringArray(244, GLNarration, false);
			s.WriteByteArray(245, LineType, false);
			s.WriteInt32Value(246, AuditRecordID);
			s.WriteToken(221);
		}

		/// <summary>
		/// Default Constructor 
		/// </summary>
		public BKMemorisedTransaction ()
		{}
		/// <summary>
		/// Construct from BKStreamReader
		/// </summary>
		public BKMemorisedTransaction (BankLinkTokenStreamReader s)
		{
			var token = BeginToken;
			while (token != EndToken)
			{
				switch (token)
				{
			case 222 :
				SequenceNo = s.ReadInt32Value("SequenceNo");
				break;
			case 223 :
				Type = s.ReadByteValue("Type");
				break;
			case 224 :
				Amount = s.ReadMoneyValue("Amount");
				break;
			case 225 :
				Reference = s.ReadShortStringValue("Reference");
				break;
			case 226 :
				Particulars = s.ReadShortStringValue("Particulars");
				break;
			case 227 :
				Analysis = s.ReadShortStringValue("Analysis");
				break;
			case 228 :
				OtherParty = s.ReadShortStringValue("OtherParty");
				break;
			case 229 :
				StatementDetails = s.ReadShortStringValue("StatementDetails");
				break;
			case 230 :
				MatchonAmount = s.ReadByteValue("MatchonAmount");
				break;
			case 231 :
				MatchonRefce = s.ReadBooleanValue("MatchonRefce");
				break;
			case 232 :
				MatchonParticulars = s.ReadBooleanValue("MatchonParticulars");
				break;
			case 233 :
				MatchonAnalysis = s.ReadBooleanValue("MatchonAnalysis");
				break;
			case 234 :
				MatchonOtherParty = s.ReadBooleanValue("MatchonOtherParty");
				break;
			case 235 :
				MatchOnStatementDetails = s.ReadBooleanValue("MatchOnStatementDetails");
				break;
			case 236 :
				Account = s.ReadShortStringArray("Account", 236, 50, false);
				break;
			case 237 :
				Percentage = s.ReadMoneyArray("Percentage", 237, 50, false);
				break;
			case 238 :
				GSTClass = s.ReadByteArray("GSTClass", 238, 50, false);
				break;
			case 239 :
				PayeeNumber = s.ReadInt32Value("PayeeNumber");
				break;
			case 240 :
				FromMasterList = s.ReadBooleanValue("FromMasterList");
				break;
			case 241 :
				GSTHasBeenEdited = s.ReadBooleanArray("GSTHasBeenEdited", 241, 50, false);
				break;
			case 242 :
				MatchonNotes = s.ReadBooleanValue("MatchonNotes");
				break;
			case 243 :
				Notes = s.ReadShortStringValue("Notes");
				break;
			case 244 :
				GLNarration = s.ReadShortStringArray("GLNarration", 244, 50, false);
				break;
			case 245 :
				LineType = s.ReadByteArray("LineType", 245, 50, false);
				break;
			case 246 :
				AuditRecordID = s.ReadInt32Value("AuditRecordID");
				break;
			case BeginToken :
			case EndToken :
				break;
			default:
				throw new Exception(string.Format("unexpected Code: {0} reading MemorisedTransaction",token) );
				}
			token = s.ReadToken();
			}
		}


	}


}



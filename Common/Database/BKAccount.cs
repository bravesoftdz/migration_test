// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
using System;
using BankLink.Practice.Common.Entities;
using System.Xml.Serialization;


namespace BankLink.Practice.BooksIO
{
	/// <summary>
	/// BK - Account class
	/// </summary>
	public partial class BKAccount 
	{


		/// <summary>
		/// AccountCode property
		/// </summary>
		[XmlAttribute("AccountCode", DataType = "string")]
		public String AccountCode { get; set; }



		/// <summary>
		/// ChartID property
		/// </summary>
		[XmlAttribute("ChartID", DataType = "string")]
		public String ChartID { get; set; }



		/// <summary>
		/// AccountDescription property
		/// </summary>
		[XmlAttribute("AccountDescription", DataType = "string")]
		public String AccountDescription { get; set; }



		/// <summary>
		/// GSTClass property
		/// </summary>
		[XmlAttribute("GSTClass", DataType = "unsignedByte")]
		public byte GSTClass { get; set; }



		/// <summary>
		/// PostingAllowed property
		/// </summary>
		[XmlAttribute("PostingAllowed", DataType = "boolean")]
		public bool PostingAllowed { get; set; }



		/// <summary>
		/// AccountType property
		/// </summary>
		[XmlAttribute("AccountType", DataType = "unsignedByte")]
		public byte AccountType { get; set; }



		/// <summary>
		/// EnterQuantity property
		/// </summary>
		[XmlAttribute("EnterQuantity", DataType = "boolean")]
		public bool EnterQuantity { get; set; }



		/// <summary>
		/// PrintinDivision property
		/// </summary>
		[XmlArray("PrintinDivisions"),XmlArrayItem("PrintinDivision", DataType = "boolean")]
		public bool[] PrintinDivision { get; set; }


		/// <summary>
		/// MoneyVarianceUp property
		/// </summary>
		[XmlAttribute("MoneyVarianceUp", DataType = "long")]
		public Int64 MoneyVarianceUp { get; set; }



		/// <summary>
		/// MoneyVarianceDown property
		/// </summary>
		[XmlAttribute("MoneyVarianceDown", DataType = "long")]
		public Int64 MoneyVarianceDown { get; set; }



		/// <summary>
		/// PercentVarianceUp property
		/// </summary>
		[XmlAttribute("PercentVarianceUp", DataType = "long")]
		public Int64 PercentVarianceUp { get; set; }



		/// <summary>
		/// PercentVarianceDown property
		/// </summary>
		[XmlAttribute("PercentVarianceDown", DataType = "long")]
		public Int64 PercentVarianceDown { get; set; }



		/// <summary>
		/// LastYearsTotalsSBOnly property
		/// </summary>
		[XmlArray("LastYearsTotalsSBOnlys"),XmlArrayItem("LastYearsTotalsSBOnly", DataType = "long")]
		public Int64[] LastYearsTotalsSBOnly { get; set; }


		/// <summary>
		/// OpeningBalanceSBOnly property
		/// </summary>
		[XmlAttribute("OpeningBalanceSBOnly", DataType = "long")]
		public Int64 OpeningBalanceSBOnly { get; set; }



		/// <summary>
		/// Subtype property
		/// </summary>
		[XmlAttribute("Subtype", DataType = "unsignedByte")]
		public byte Subtype { get; set; }



		/// <summary>
		/// AlternativeCode property
		/// </summary>
		[XmlAttribute("AlternativeCode", DataType = "string")]
		public String AlternativeCode { get; set; }



		/// <summary>
		/// LinkedAccountOS property
		/// </summary>
		[XmlAttribute("LinkedAccountOS", DataType = "string")]
		public String LinkedAccountOS { get; set; }



		/// <summary>
		/// LinkedAccountCS property
		/// </summary>
		[XmlAttribute("LinkedAccountCS", DataType = "string")]
		public String LinkedAccountCS { get; set; }



		/// <summary>
		/// HideInBasicChart property
		/// </summary>
		[XmlAttribute("HideInBasicChart", DataType = "boolean")]
		public bool HideInBasicChart { get; set; }



		/// <summary>
		/// AuditRecordID property
		/// </summary>
		[XmlAttribute("AuditRecordID", DataType = "int")]
		public Int32 AuditRecordID { get; set; }



		/// <summary>
		/// Inactive property
		/// </summary>
		[XmlAttribute("Inactive", DataType = "boolean")]
		public bool Inactive { get; set; }


		/// <summary>
		/// Class Begin Token
		/// </summary>
		public const byte BeginToken = 80;
		/// <summary>
		/// Class End Token
		/// </summary>
		public const byte EndToken = 81;
		/// <summary>
		/// Write to BKStream
		/// </summary>
		public void WriteBKStream(BankLinkTokenStreamWriter s)
		{
			s.WriteToken(80);
			s.WriteShortStringValue(82, AccountCode);
			s.WriteShortStringValue(83, ChartID);
			s.WriteShortStringValue(84, AccountDescription);
			s.WriteByteValue(85, GSTClass);
			s.WriteBooleanValue(86, PostingAllowed);
			s.WriteByteValue(87, AccountType);
			s.WriteBooleanValue(88, EnterQuantity);
			s.WriteBooleanArray(89, PrintinDivision, false);
			s.WriteMoneyValue(90, MoneyVarianceUp);
			s.WriteMoneyValue(91, MoneyVarianceDown);
			s.WriteMoneyValue(92, PercentVarianceUp);
			s.WriteMoneyValue(93, PercentVarianceDown);
			s.WriteMoneyArray(94, LastYearsTotalsSBOnly, false);
			s.WriteMoneyValue(95, OpeningBalanceSBOnly);
			s.WriteByteValue(96, Subtype);
			s.WriteShortStringValue(97, AlternativeCode);
			s.WriteShortStringValue(98, LinkedAccountOS);
			s.WriteShortStringValue(99, LinkedAccountCS);
			s.WriteBooleanValue(100, HideInBasicChart);
			s.WriteInt32Value(101, AuditRecordID);
			s.WriteBooleanValue(102, Inactive);
			s.WriteToken(81);
		}

		/// <summary>
		/// Default Constructor 
		/// </summary>
		public BKAccount ()
		{}
		/// <summary>
		/// Construct from BKStreamReader
		/// </summary>
		public BKAccount (BankLinkTokenStreamReader s)
		{
			var token = BeginToken;
			while (token != EndToken)
			{
				switch (token)
				{
			case 82 :
				AccountCode = s.ReadShortStringValue("AccountCode");
				break;
			case 83 :
				ChartID = s.ReadShortStringValue("ChartID");
				break;
			case 84 :
				AccountDescription = s.ReadShortStringValue("AccountDescription");
				break;
			case 85 :
				GSTClass = s.ReadByteValue("GSTClass");
				break;
			case 86 :
				PostingAllowed = s.ReadBooleanValue("PostingAllowed");
				break;
			case 87 :
				AccountType = s.ReadByteValue("AccountType");
				break;
			case 88 :
				EnterQuantity = s.ReadBooleanValue("EnterQuantity");
				break;
			case 89 :
				PrintinDivision = s.ReadBooleanArray("PrintinDivision", 89, 250, false);
				break;
			case 90 :
				MoneyVarianceUp = s.ReadMoneyValue("MoneyVarianceUp");
				break;
			case 91 :
				MoneyVarianceDown = s.ReadMoneyValue("MoneyVarianceDown");
				break;
			case 92 :
				PercentVarianceUp = s.ReadMoneyValue("PercentVarianceUp");
				break;
			case 93 :
				PercentVarianceDown = s.ReadMoneyValue("PercentVarianceDown");
				break;
			case 94 :
				LastYearsTotalsSBOnly = s.ReadMoneyArray("LastYearsTotalsSBOnly", 94, 12, false);
				break;
			case 95 :
				OpeningBalanceSBOnly = s.ReadMoneyValue("OpeningBalanceSBOnly");
				break;
			case 96 :
				Subtype = s.ReadByteValue("Subtype");
				break;
			case 97 :
				AlternativeCode = s.ReadShortStringValue("AlternativeCode");
				break;
			case 98 :
				LinkedAccountOS = s.ReadShortStringValue("LinkedAccountOS");
				break;
			case 99 :
				LinkedAccountCS = s.ReadShortStringValue("LinkedAccountCS");
				break;
			case 100 :
				HideInBasicChart = s.ReadBooleanValue("HideInBasicChart");
				break;
			case 101 :
				AuditRecordID = s.ReadInt32Value("AuditRecordID");
				break;
			case 102 :
				Inactive = s.ReadBooleanValue("Inactive");
				break;
			case BeginToken :
			case EndToken :
				break;
			default:
				throw new Exception(string.Format("unexpected Code: {0} reading Account",token) );
				}
			token = s.ReadToken();
			}
		}


	}


}



Unit MC_XMLHelper;
// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
// ----------------------------------------------------------------------------
interface
uses
	XMLIntf,
	MCdefs;

type

TExchange_Rates_Header_RecHelper = record helper for TExchange_Rates_Header_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TExchange_Rate_RecHelper = record helper for TExchange_Rate_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


// ----------------------------------------------------------------------------
implementation
uses
	WebUtils,
	Variants,
	SysUtils;


procedure ReRaise(E: Exception; Doing: string);
begin
	raise exception.Create( format('Error : %s While : %s',[E.Message, Doing]));
end;


// ----------------------------------------------------------------------------

class function TExchange_Rates_Header_RecHelper.GetXMLNodeName: string;
begin
	result := 'MCExchangeRatesHeader';
end;


function TExchange_Rates_Header_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'FileVersion', ehFile_Version);
	SetIntAttr(Result, 'LRN', ehLRN);
	SetTextAttr(Result, 'Name', ehName);
	SetIntAttr(Result, 'ListType', ehList_Type);
	PNode := Result.AddChild('ISOCodes');
	M :=  Low(ehISO_Codes);
	for I := Low(ehISO_Codes) to High(ehISO_Codes) do
		if  ehISO_Codes[I] > '' then
			M := I;
	for I := Low(ehISO_Codes) to M do begin
		CNode := PNode.AddChild('ISOCode');
		CNode.NodeValue := ehISO_Codes[I];
	end;
	SetArray(Result, 'CurTypes', ehCur_Type);
	SetIntAttr(Result, 'AuditRecordID', ehAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TExchange_Rates_Header_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	ehFile_Version := GetIntAttr(Result, 'FileVersion');
	ehLRN := GetIntAttr(Result, 'LRN');
	ehName := GetTextAttr(Result, 'Name');
	ehList_Type := GetIntAttr(Result, 'ListType');
	
	PNode := Result.ChildNodes.FindNode('ISOCodes');
	if Assigned(PNode) then
		CNode := PNode.ChildNodes.FindNode('ISOCode')
	else
		CNode := Nil;
	for I := low(ehISO_Codes) to High(ehISO_Codes) do begin
		if Assigned(CNode) then begin
			if CNode.Nodevalue <> null then 
				ehISO_Codes[I] := CNode.Nodevalue
			else ehISO_Codes[I] := '';
			CNode := CNode.NextSibling;
		end else
			ehISO_Codes[I] := ''
	end;

	GetArray(Result, 'CurTypes', ehCur_Type);
	ehAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TExchange_Rates_Header_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TExchange_Rate_RecHelper.GetXMLNodeName: string;
begin
	result := 'MCExchangeRate';
end;


function TExchange_Rate_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'AppliesUntil', erApplies_Until);
	SetBoolAttr(Result, 'Locked', erLocked);
	SetIntAttr(Result, 'AuditRecordID', erAudit_Record_ID);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TExchange_Rate_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	erApplies_Until := GetIntAttr(Result, 'AppliesUntil');
	erLocked := GetBoolAttr(Result, 'Locked');
	erAudit_Record_ID := GetIntAttr(Result, 'AuditRecordID');
	except
		on E: Exception do ReRaise (E, 'Reading TExchange_Rate_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


end.

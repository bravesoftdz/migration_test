Unit LA_XMLHelper;
// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
// ----------------------------------------------------------------------------
interface
uses
	XMLIntf,
	LAdefs;

type

TPrinter_RecHelper = record helper for TPrinter_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TForm_RecHelper = record helper for TForm_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TReport_Setting_RecHelper = record helper for TReport_Setting_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TWindows_Report_Setting_RecHelper = record helper for TWindows_Report_Setting_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


// ----------------------------------------------------------------------------
implementation
uses
	WebUtils,
	Variants,
	SysUtils;


procedure ReRaise(E: Exception; Doing: string);
begin
	raise exception.Create( format('Error : %s While : %s',[E.Message, Doing]));
end;


// ----------------------------------------------------------------------------

class function TPrinter_RecHelper.GetXMLNodeName: string;
begin
	result := 'LAPrinter';
end;


function TPrinter_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'PrinterName', s3Printer_Name);
	SetTextAttr(Result, 'PrinterModelName', s3Printer_Model_Name);
	SetTextAttr(Result, 'LibraryFileName', s3Library_File_Name);
	SetIntAttr(Result, 'ConnectionType', s3Connection_Type);
	SetTextAttr(Result, 'QueueName', s3Queue_Name);
	SetIntAttr(Result, 'LRN', s3LRN);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TPrinter_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	s3Printer_Name := GetTextAttr(Result, 'PrinterName');
	s3Printer_Model_Name := GetTextAttr(Result, 'PrinterModelName');
	s3Library_File_Name := GetTextAttr(Result, 'LibraryFileName');
	s3Connection_Type := GetIntAttr(Result, 'ConnectionType');
	s3Queue_Name := GetTextAttr(Result, 'QueueName');
	s3LRN := GetIntAttr(Result, 'LRN');
	except
		on E: Exception do ReRaise (E, 'Reading TPrinter_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TForm_RecHelper.GetXMLNodeName: string;
begin
	result := 'LAForm';
end;


function TForm_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'FormNumber', s5Form_Number);
	SetTextAttr(Result, 'Description', s5Description);
	SetIntAttr(Result, 'PageType', s5Page_Type);
	SetInt64Attr(Result, 'PageLength', s5Page_Length);
	SetIntAttr(Result, 'WindowsFormType', s5Windows_Form_Type);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TForm_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	s5Form_Number := GetIntAttr(Result, 'FormNumber');
	s5Description := GetTextAttr(Result, 'Description');
	s5Page_Type := GetIntAttr(Result, 'PageType');
	s5Page_Length := GetInt64Attr(Result, 'PageLength');
	s5Windows_Form_Type := GetIntAttr(Result, 'WindowsFormType');
	except
		on E: Exception do ReRaise (E, 'Reading TForm_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TReport_Setting_RecHelper.GetXMLNodeName: string;
begin
	result := 'LAReportSetting';
end;


function TReport_Setting_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'ReportName', s6Report_Name);
	SetIntAttr(Result, 'Printer', s6Printer);
	SetIntAttr(Result, 'FormNumber', s6Form_Number);
	SetTextAttr(Result, 'Location', s6Location);
	SetTextAttr(Result, 'Orientation', s6Orientation);
	SetTextAttr(Result, 'Typeface', s6Typeface);
	SetTextAttr(Result, 'Font', s6Font);
	SetIntAttr(Result, 'FontSize', s6Font_Size);
	SetTextAttr(Result, 'Style', s6Style);
	SetTextAttr(Result, 'CPI', s6CPI);
	SetTextAttr(Result, 'LPI', s6LPI);
	SetIntAttr(Result, 'NumberofCopies', s6Number_of_Copies);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TReport_Setting_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	s6Report_Name := GetTextAttr(Result, 'ReportName');
	s6Printer := GetIntAttr(Result, 'Printer');
	s6Form_Number := GetIntAttr(Result, 'FormNumber');
	s6Location := GetTextAttr(Result, 'Location');
	s6Orientation := GetTextAttr(Result, 'Orientation');
	s6Typeface := GetTextAttr(Result, 'Typeface');
	s6Font := GetTextAttr(Result, 'Font');
	s6Font_Size := GetIntAttr(Result, 'FontSize');
	s6Style := GetTextAttr(Result, 'Style');
	s6CPI := GetTextAttr(Result, 'CPI');
	s6LPI := GetTextAttr(Result, 'LPI');
	s6Number_of_Copies := GetIntAttr(Result, 'NumberofCopies');
	except
		on E: Exception do ReRaise (E, 'Reading TReport_Setting_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TWindows_Report_Setting_RecHelper.GetXMLNodeName: string;
begin
	result := 'LAWindowsReportSetting';
end;


function TWindows_Report_Setting_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetTextAttr(Result, 'ReportName', s7Report_Name);
	SetTextAttr(Result, 'PrinterName', s7Printer_Name);
	SetIntAttr(Result, 'Paper', s7Paper);
	SetIntAttr(Result, 'Bin', s7Bin);
	SetIntAttr(Result, 'Orientation', s7Orientation);
	SetTextAttr(Result, 'BaseFontName', s7Base_Font_Name);
	SetIntAttr(Result, 'BaseFontStyle', s7Base_Font_Style);
	SetIntAttr(Result, 'BaseFontSize', s7Base_Font_Size);
	SetIntAttr(Result, 'TopMargin', s7Top_Margin);
	SetIntAttr(Result, 'LeftMargin', s7Left_Margin);
	SetIntAttr(Result, 'BottomMargin', s7Bottom_Margin);
	SetIntAttr(Result, 'RightMargin', s7Right_Margin);
	SetTextAttr(Result, 'FormatStyle', s7Format_Style);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TWindows_Report_Setting_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	s7Report_Name := GetTextAttr(Result, 'ReportName');
	s7Printer_Name := GetTextAttr(Result, 'PrinterName');
	s7Paper := GetIntAttr(Result, 'Paper');
	s7Bin := GetIntAttr(Result, 'Bin');
	s7Orientation := GetIntAttr(Result, 'Orientation');
	s7Base_Font_Name := GetTextAttr(Result, 'BaseFontName');
	s7Base_Font_Style := GetIntAttr(Result, 'BaseFontStyle');
	s7Base_Font_Size := GetIntAttr(Result, 'BaseFontSize');
	s7Top_Margin := GetIntAttr(Result, 'TopMargin');
	s7Left_Margin := GetIntAttr(Result, 'LeftMargin');
	s7Bottom_Margin := GetIntAttr(Result, 'BottomMargin');
	s7Right_Margin := GetIntAttr(Result, 'RightMargin');
	s7Format_Style := GetTextAttr(Result, 'FormatStyle');
	except
		on E: Exception do ReRaise (E, 'Reading TWindows_Report_Setting_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


end.

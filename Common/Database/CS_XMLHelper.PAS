Unit CS_XMLHelper;
// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
// ----------------------------------------------------------------------------
interface
uses
	XMLIntf,
	CSdefs;

type

TCoding_Stat_Fields_RecHelper = record helper for TCoding_Stat_Fields_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


TCoding_Statistics_RecHelper = record helper for TCoding_Statistics_Rec
public
	function WriteRecToNode(var Node: IXMLNode): IXMLNode;
	function ReadRecFromNode(Node: IXMLNode): IXMLNode;
	class function GetXMLNodeName: string; static;
end;


// ----------------------------------------------------------------------------
implementation
uses
	WebUtils,
	Variants,
	SysUtils;


procedure ReRaise(E: Exception; Doing: string);
begin
	raise exception.Create( format('Error : %s While : %s',[E.Message, Doing]));
end;


// ----------------------------------------------------------------------------

class function TCoding_Stat_Fields_RecHelper.GetXMLNodeName: string;
begin
	result := 'CSCodingStatFields';
end;


function TCoding_Stat_Fields_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'FileVersion', sfFile_Version);
	SetIntAttr(Result, 'ReadVersion', sfRead_Version);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TCoding_Stat_Fields_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	sfFile_Version := GetIntAttr(Result, 'FileVersion');
	sfRead_Version := GetIntAttr(Result, 'ReadVersion');
	except
		on E: Exception do ReRaise (E, 'Reading TCoding_Stat_Fields_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;

// ----------------------------------------------------------------------------

class function TCoding_Statistics_RecHelper.GetXMLNodeName: string;
begin
	result := 'CSCodingStatistics';
end;


function TCoding_Statistics_RecHelper.WriteRecToNode(var Node: IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J, M: Integer;
begin
	Result := Node.AddChild(GetXMLNodeName);
	SetIntAttr(Result, 'ClientLRN', csClient_LRN);
	SetIntAttr(Result, 'Month', csMonth);
	SetBoolAttr(Result, 'Updated', csUpdated);
	SetIntAttr(Result, 'MemorizationCount', csMemorization_Count);
	SetIntAttr(Result, 'AnalysisCount', csAnalysis_Count);
	SetIntAttr(Result, 'PayeeCount', csPayee_Count);
	SetIntAttr(Result, 'ManualCount', csManual_Count);
	SetIntAttr(Result, 'UncodedCount', csUncoded_Count);
	SetIntAttr(Result, 'MasterMemCount', csMaster_Mem_Count);
	SetIntAttr(Result, 'ManSuperCount', csMan_Super_Count);
	SetIntAttr(Result, 'NotesCount', csNotes_Count);
	SetIntAttr(Result, 'ClientFilesSent', csClient_Files_Sent);
	SetIntAttr(Result, 'ClientFilesReceived', csClient_Files_Received);

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


function TCoding_Statistics_RecHelper.ReadRecFromNode(Node :IXMLNode): IXMLNode;
var PNode, CNode, CCNode: IXMLNode;
	I, J: Integer;
begin
	if Node.NodeName = GetXMLNodeName then Result := Node
	else
	Result := Node.ChildNodes.FindNode(GetXMLNodeName);
	if not assigned(Result) then exit;
	try
	csClient_LRN := GetIntAttr(Result, 'ClientLRN');
	csMonth := GetIntAttr(Result, 'Month');
	csUpdated := GetBoolAttr(Result, 'Updated');
	csMemorization_Count := GetIntAttr(Result, 'MemorizationCount');
	csAnalysis_Count := GetIntAttr(Result, 'AnalysisCount');
	csPayee_Count := GetIntAttr(Result, 'PayeeCount');
	csManual_Count := GetIntAttr(Result, 'ManualCount');
	csUncoded_Count := GetIntAttr(Result, 'UncodedCount');
	csMaster_Mem_Count := GetIntAttr(Result, 'MasterMemCount');
	csMan_Super_Count := GetIntAttr(Result, 'ManSuperCount');
	csNotes_Count := GetIntAttr(Result, 'NotesCount');
	csClient_Files_Sent := GetIntAttr(Result, 'ClientFilesSent');
	csClient_Files_Received := GetIntAttr(Result, 'ClientFilesReceived');
	except
		on E: Exception do ReRaise (E, 'Reading TCoding_Statistics_Rec');
	end;

	CNode := nil;
	CCNode := nil;
	PNode := nil;
end;


end.

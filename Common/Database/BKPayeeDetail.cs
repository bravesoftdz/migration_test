// **********************************************************
// This file is Auto generated by DBGen
// Any changes will be lost when the file is regenerated
// **********************************************************
using System;
using BankLink.Practice.Common.Entities;
using System.Xml.Serialization;


namespace BankLink.Practice.BooksIO
{
	/// <summary>
	/// BK - PayeeDetail class
	/// </summary>
	public partial class BKPayeeDetail 
	{


		/// <summary>
		/// Number property
		/// </summary>
		[XmlAttribute("Number", DataType = "int")]
		public Int32 Number { get; set; }



		/// <summary>
		/// Name property
		/// </summary>
		[XmlAttribute("Name", DataType = "string")]
		public String Name { get; set; }



		/// <summary>
		/// AuditRecordID property
		/// </summary>
		[XmlAttribute("AuditRecordID", DataType = "int")]
		public Int32 AuditRecordID { get; set; }



		/// <summary>
		/// Contractor property
		/// </summary>
		[XmlAttribute("Contractor", DataType = "boolean")]
		public bool Contractor { get; set; }



		/// <summary>
		/// Surname property
		/// </summary>
		[XmlAttribute("Surname", DataType = "string")]
		public String Surname { get; set; }



		/// <summary>
		/// GivenName property
		/// </summary>
		[XmlAttribute("GivenName", DataType = "string")]
		public String GivenName { get; set; }



		/// <summary>
		/// OtherName property
		/// </summary>
		[XmlAttribute("OtherName", DataType = "string")]
		public String OtherName { get; set; }



		/// <summary>
		/// Address property
		/// </summary>
		[XmlAttribute("Address", DataType = "string")]
		public String Address { get; set; }



		/// <summary>
		/// Town property
		/// </summary>
		[XmlAttribute("Town", DataType = "string")]
		public String Town { get; set; }



		/// <summary>
		/// State property
		/// </summary>
		[XmlAttribute("State", DataType = "string")]
		public String State { get; set; }



		/// <summary>
		/// PostCode property
		/// </summary>
		[XmlAttribute("PostCode", DataType = "string")]
		public String PostCode { get; set; }



		/// <summary>
		/// PhoneNumber property
		/// </summary>
		[XmlAttribute("PhoneNumber", DataType = "string")]
		public String PhoneNumber { get; set; }



		/// <summary>
		/// ABN property
		/// </summary>
		[XmlAttribute("ABN", DataType = "string")]
		public String ABN { get; set; }



		/// <summary>
		/// BusinessName property
		/// </summary>
		[XmlAttribute("BusinessName", DataType = "string")]
		public String BusinessName { get; set; }



		/// <summary>
		/// TradingName property
		/// </summary>
		[XmlAttribute("TradingName", DataType = "string")]
		public String TradingName { get; set; }



		/// <summary>
		/// Country property
		/// </summary>
		[XmlAttribute("Country", DataType = "string")]
		public String Country { get; set; }



		/// <summary>
		/// InstitutionBSB property
		/// </summary>
		[XmlAttribute("InstitutionBSB", DataType = "string")]
		public String InstitutionBSB { get; set; }



		/// <summary>
		/// InstitutionAccountNumber property
		/// </summary>
		[XmlAttribute("InstitutionAccountNumber", DataType = "string")]
		public String InstitutionAccountNumber { get; set; }



		/// <summary>
		/// IsIndividual property
		/// </summary>
		[XmlAttribute("IsIndividual", DataType = "boolean")]
		public bool IsIndividual { get; set; }



		/// <summary>
		/// AddressLine2 property
		/// </summary>
		[XmlAttribute("AddressLine2", DataType = "string")]
		public String AddressLine2 { get; set; }



		/// <summary>
		/// StateId property
		/// </summary>
		[XmlAttribute("StateId", DataType = "int")]
		public Int32 StateId { get; set; }



		/// <summary>
		/// Inactive property
		/// </summary>
		[XmlAttribute("Inactive", DataType = "boolean")]
		public bool Inactive { get; set; }


		/// <summary>
		/// Class Begin Token
		/// </summary>
		public const byte BeginToken = 90;
		/// <summary>
		/// Class End Token
		/// </summary>
		public const byte EndToken = 91;
		/// <summary>
		/// Write to BKStream
		/// </summary>
		public void WriteBKStream(BankLinkTokenStreamWriter s)
		{
			s.WriteToken(90);
			s.WriteInt32Value(92, Number);
			s.WriteShortStringValue(93, Name);
			s.WriteInt32Value(94, AuditRecordID);
			s.WriteBooleanValue(95, Contractor);
			s.WriteShortStringValue(96, Surname);
			s.WriteShortStringValue(97, GivenName);
			s.WriteShortStringValue(98, OtherName);
			s.WriteShortStringValue(99, Address);
			s.WriteShortStringValue(100, Town);
			s.WriteShortStringValue(101, State);
			s.WriteShortStringValue(102, PostCode);
			s.WriteShortStringValue(103, PhoneNumber);
			s.WriteShortStringValue(104, ABN);
			s.WriteShortStringValue(105, BusinessName);
			s.WriteShortStringValue(106, TradingName);
			s.WriteShortStringValue(107, Country);
			s.WriteShortStringValue(108, InstitutionBSB);
			s.WriteShortStringValue(109, InstitutionAccountNumber);
			s.WriteBooleanValue(110, IsIndividual);
			s.WriteShortStringValue(111, AddressLine2);
			s.WriteInt32Value(112, StateId);
			s.WriteBooleanValue(113, Inactive);
			s.WriteToken(91);
		}

		/// <summary>
		/// Default Constructor 
		/// </summary>
		public BKPayeeDetail ()
		{}
		/// <summary>
		/// Construct from BKStreamReader
		/// </summary>
		public BKPayeeDetail (BankLinkTokenStreamReader s)
		{
			var token = BeginToken;
			while (token != EndToken)
			{
				switch (token)
				{
			case 92 :
				Number = s.ReadInt32Value("Number");
				break;
			case 93 :
				Name = s.ReadShortStringValue("Name");
				break;
			case 94 :
				AuditRecordID = s.ReadInt32Value("AuditRecordID");
				break;
			case 95 :
				Contractor = s.ReadBooleanValue("Contractor");
				break;
			case 96 :
				Surname = s.ReadShortStringValue("Surname");
				break;
			case 97 :
				GivenName = s.ReadShortStringValue("GivenName");
				break;
			case 98 :
				OtherName = s.ReadShortStringValue("OtherName");
				break;
			case 99 :
				Address = s.ReadShortStringValue("Address");
				break;
			case 100 :
				Town = s.ReadShortStringValue("Town");
				break;
			case 101 :
				State = s.ReadShortStringValue("State");
				break;
			case 102 :
				PostCode = s.ReadShortStringValue("PostCode");
				break;
			case 103 :
				PhoneNumber = s.ReadShortStringValue("PhoneNumber");
				break;
			case 104 :
				ABN = s.ReadShortStringValue("ABN");
				break;
			case 105 :
				BusinessName = s.ReadShortStringValue("BusinessName");
				break;
			case 106 :
				TradingName = s.ReadShortStringValue("TradingName");
				break;
			case 107 :
				Country = s.ReadShortStringValue("Country");
				break;
			case 108 :
				InstitutionBSB = s.ReadShortStringValue("InstitutionBSB");
				break;
			case 109 :
				InstitutionAccountNumber = s.ReadShortStringValue("InstitutionAccountNumber");
				break;
			case 110 :
				IsIndividual = s.ReadBooleanValue("IsIndividual");
				break;
			case 111 :
				AddressLine2 = s.ReadShortStringValue("AddressLine2");
				break;
			case 112 :
				StateId = s.ReadInt32Value("StateId");
				break;
			case 113 :
				Inactive = s.ReadBooleanValue("Inactive");
				break;
			case BeginToken :
			case EndToken :
				break;
			default:
				throw new Exception(string.Format("unexpected Code: {0} reading PayeeDetail",token) );
				}
			token = s.ReadToken();
			}
		}


	}


}


